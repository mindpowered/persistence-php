<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace haxe\ds;

use \haxe\IMap;
use \php\Boot;
use \php\_Boot\HxEnum;

class EnumValueMap extends BalancedTree implements IMap {
	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:31: lines 31-61
		parent::__construct();
	}


	/**
	 * @param mixed $k1
	 * @param mixed $k2
	 * 
	 * @return int
	 */
	public function compare ($k1, $k2) {
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:34: characters 2-40
		$d = Boot::dynamicField($k1, 'index') - Boot::dynamicField($k2, 'index');
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:35: characters 2-22
		if ($d !== 0) {
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:35: characters 14-22
			return $d;
		}
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:36: characters 2-30
		$p1 = \Array_hx::wrap(Boot::dynamicField($k1, 'params'));
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:37: characters 2-30
		$p2 = \Array_hx::wrap(Boot::dynamicField($k2, 'params'));
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:38: characters 2-48
		if (($p1->length === 0) && ($p2->length === 0)) {
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:38: characters 40-48
			return 0;
		}
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:39: characters 2-28
		return $this->compareArgs($p1, $p2);
	}


	/**
	 * @param mixed $v1
	 * @param mixed $v2
	 * 
	 * @return int
	 */
	public function compareArg ($v1, $v2) {
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:53: lines 53-59
		if (($v1 instanceof HxEnum) && ($v2 instanceof HxEnum)) {
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:54: characters 3-18
			return $this->compare($v1, $v2);
		} else if (($v1 instanceof \Array_hx) && ($v2 instanceof \Array_hx)) {
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:56: characters 3-22
			return $this->compareArgs($v1, $v2);
		} else {
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:58: characters 3-26
			return \Reflect::compare($v1, $v2);
		}
	}


	/**
	 * @param \Array_hx $a1
	 * @param \Array_hx $a2
	 * 
	 * @return int
	 */
	public function compareArgs ($a1, $a2) {
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:43: characters 2-33
		$ld = $a1->length - $a2->length;
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:44: characters 2-24
		if ($ld !== 0) {
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:44: characters 15-24
			return $ld;
		}
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:45: lines 45-48
		$_g1 = 0;
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:45: lines 45-48
		$_g = $a1->length;
		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:45: lines 45-48
		while ($_g1 < $_g) {
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:45: lines 45-48
			$_g1 = $_g1 + 1;
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:45: characters 7-8
			$i = $_g1 - 1;
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:46: characters 3-36
			$d = $this->compareArg(($a1->arr[$i] ?? null), ($a2->arr[$i] ?? null));
			#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:47: characters 3-23
			if ($d !== 0) {
				#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:47: characters 15-23
				return $d;
			}
		}

		#/usr/share/haxe/std/haxe/ds/EnumValueMap.hx:49: characters 2-10
		return 0;
	}
}


Boot::registerClass(EnumValueMap::class, 'haxe.ds.EnumValueMap');
