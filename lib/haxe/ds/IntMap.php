<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace haxe\ds;

use \haxe\IMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;

class IntMap implements IMap {
	/**
	 * @var mixed
	 */
	public $data;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:37: characters 9-33
		$this1 = [];
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:37: characters 2-33
		$this->data = $this1;
	}


	/**
	 * @param int $key
	 * 
	 * @return bool
	 */
	public function exists ($key) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:58: characters 2-43
		return array_key_exists($key, $this->data);
	}


	/**
	 * @param int $key
	 * 
	 * @return mixed
	 */
	public function get ($key) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:51: characters 2-44
		return ($this->data[$key] ?? null);
	}


	/**
	 * @return object
	 */
	public function iterator () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:84: characters 9-45
		return new NativeArrayIterator(array_values($this->data));
	}


	/**
	 * @return object
	 */
	public function keys () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:77: characters 9-43
		return new NativeArrayIterator(array_keys($this->data));
	}


	/**
	 * @param int $key
	 * 
	 * @return bool
	 */
	public function remove ($key) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:65: lines 65-68
		if (array_key_exists($key, $this->data)) {
			#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:66: characters 3-26
			unset($this->data[$key]);
			#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:67: characters 3-14
			return true;
		}
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:70: characters 2-14
		return false;
	}


	/**
	 * @param int $key
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function set ($key, $value) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:44: characters 2-19
		$this->data[$key] = $value;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:91: characters 14-31
		$this1 = [];
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:91: characters 2-32
		$parts = $this1;
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:92: lines 92-94
		foreach (($this->data) as $key => $value) {
			#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:93: characters 28-58
			$tmp = "" . ($key??'null') . " => " . (\Std::string($value)??'null');
			#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:93: characters 3-59
			array_push($parts, $tmp);
		};
		#/usr/share/haxe/std/php7/_std/haxe/ds/IntMap.hx:96: characters 2-48
		return "{" . (implode(", ", $parts)??'null') . "}";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(IntMap::class, 'haxe.ds.IntMap');
