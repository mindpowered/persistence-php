<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace haxe\ds;

use \php\Boot;

class TreeNode {
	/**
	 * @var int
	 */
	public $_height;
	/**
	 * @var mixed
	 */
	public $key;
	/**
	 * @var TreeNode
	 */
	public $left;
	/**
	 * @var TreeNode
	 */
	public $right;
	/**
	 * @var mixed
	 */
	public $value;


	/**
	 * @param TreeNode $l
	 * @param mixed $k
	 * @param mixed $v
	 * @param TreeNode $r
	 * @param int $h
	 * 
	 * @return void
	 */
	public function __construct ($l, $k, $v, $r, $h = -1) {
		#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:223: lines 223-232
		if ($h === null) {
			#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:223: lines 223-232
			$h = -1;
		}
		#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:224: characters 2-10
		$this->left = $l;
		#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:225: characters 2-9
		$this->key = $k;
		#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:226: characters 2-11
		$this->value = $v;
		#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:227: characters 2-11
		$this->right = $r;
		#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:228: lines 228-231
		if ($h === -1) {
			#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 13-94
			$tmp = null;
			#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 14-31
			$_this = $this->left;
			#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 34-52
			$_this1 = $this->right;
			#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 13-94
			if ((($_this === null ? 0 : $_this->_height)) > (($_this1 === null ? 0 : $_this1->_height))) {
				#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 55-72
				$_this2 = $this->left;
				#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 55-72
				if ($_this2 === null) {
					#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 13-94
					$tmp = 0;
				} else {
					#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 13-94
					$tmp = $_this2->_height;
				}
			} else {
				#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 75-93
				$_this3 = $this->right;
				#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 75-93
				if ($_this3 === null) {
					#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 13-94
					$tmp = 0;
				} else {
					#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 13-94
					$tmp = $_this3->_height;
				}
			}
			#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:229: characters 3-98
			$this->_height = $tmp + 1;
		} else {
			#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:231: characters 3-14
			$this->_height = $h;
		}
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/share/haxe/std/haxe/ds/BalancedTree.hx:237: characters 2-117
		return ((($this->left === null ? "" : ($this->left->toString()??'null') . ", "))??'null') . (("" . (\Std::string($this->key)??'null') . "=" . (\Std::string($this->value)??'null'))??'null') . ((($this->right === null ? "" : ", " . ($this->right->toString()??'null')))??'null');
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(TreeNode::class, 'haxe.ds.TreeNode');
