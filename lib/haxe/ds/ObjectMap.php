<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace haxe\ds;

use \haxe\IMap;
use \php\Boot;
use \php\_NativeArray\NativeArrayIterator;

class ObjectMap implements IMap {
	/**
	 * @var mixed
	 */
	public $_keys;
	/**
	 * @var mixed
	 */
	public $_values;


	/**
	 * @return void
	 */
	public function __construct () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:33: characters 10-32
		$this1 = [];
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:33: characters 2-32
		$this->_keys = $this1;
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:34: characters 12-34
		$this2 = [];
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:34: characters 2-34
		$this->_values = $this2;
	}


	/**
	 * @param mixed $key
	 * 
	 * @return bool
	 */
	public function exists ($key) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:49: characters 2-70
		return array_key_exists(spl_object_hash($key), $this->_values);
	}


	/**
	 * @param mixed $key
	 * 
	 * @return mixed
	 */
	public function get ($key) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:44: characters 2-39
		$id = spl_object_hash($key);
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:45: characters 9-55
		if (isset($this->_values[$id])) {
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:45: characters 37-48
			return $this->_values[$id];
		} else {
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:45: characters 51-55
			return null;
		}
	}


	/**
	 * @return object
	 */
	public function iterator () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:67: characters 9-27
		return new NativeArrayIterator($this->_values);
	}


	/**
	 * @return object
	 */
	public function keys () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:63: characters 9-25
		return new NativeArrayIterator($this->_keys);
	}


	/**
	 * @param mixed $key
	 * 
	 * @return bool
	 */
	public function remove ($key) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:53: characters 2-39
		$id = spl_object_hash($key);
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:54: lines 54-59
		if (array_key_exists($id, $this->_values)) {
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:55: characters 3-39
			unset($this->_keys[$id], $this->_values[$id]);
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:56: characters 3-14
			return true;
		} else {
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:58: characters 3-15
			return false;
		}
	}


	/**
	 * @param mixed $key
	 * @param mixed $value
	 * 
	 * @return void
	 */
	public function set ($key, $value) {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:38: characters 2-39
		$id = spl_object_hash($key);
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:39: characters 2-17
		$this->_keys[$id] = $key;
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:40: characters 2-21
		$this->_values[$id] = $value;
	}


	/**
	 * @return string
	 */
	public function toString () {
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:71: characters 2-14
		$s = "{";
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:72: characters 2-18
		$it = new NativeArrayIterator($this->_keys);
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:73: characters 12-14
		$i = $it;
		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:73: characters 12-14
		while ($i->hasNext()) {
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:73: lines 73-79
			$i1 = $i->next();
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:74: characters 3-21
			$s = ($s??'null') . (\Std::string($i1)??'null');
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:75: characters 3-14
			$s = ($s??'null') . " => ";
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:76: characters 3-26
			$s = ($s??'null') . (\Std::string($this->get($i1))??'null');
			#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:77: lines 77-78
			if ($it->hasNext()) {
				#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:78: characters 4-13
				$s = ($s??'null') . ", ";
			}
		}

		#/usr/share/haxe/std/php7/_std/haxe/ds/ObjectMap.hx:80: characters 2-16
		return ($s??'null') . "}";
	}


	public function __toString() {
		return $this->toString();
	}
}


Boot::registerClass(ObjectMap::class, 'haxe.ds.ObjectMap');
