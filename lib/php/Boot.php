<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace php;

use \php\_Boot\HxClosure;
use \php\_Boot\HxException;
use \php\_Boot\HxDynamicStr;
use \php\_Boot\HxString;
use \php\_Boot\HxClass;
use \php\_Boot\HxEnum;
use \php\_Boot\HxAnon;

class Boot {
	const PHP_PREFIX = "";


	/**
	 * @var mixed
	 */
	static protected $aliases;
	/**
	 * @var mixed
	 */
	static protected $classes;
	/**
	 * @var mixed
	 */
	static protected $getters;
	/**
	 * @var mixed
	 */
	static protected $meta;
	/**
	 * @var mixed
	 */
	static protected $setters;


	/**
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return mixed
	 */
	static public function addOrConcat ($left, $right) {
		#/usr/share/haxe/std/php7/Boot.hx:385: lines 385-387
		if (is_string($left) || is_string($right)) {
			#/usr/share/haxe/std/php7/Boot.hx:386: characters 3-40
			return ($left??'null') . ($right??'null');
		}
		#/usr/share/haxe/std/php7/Boot.hx:388: characters 2-39
		return ($left + $right);
	}


	/**
	 * @param mixed $value
	 * 
	 * @return HxClosure
	 */
	static public function castClosure ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:253: characters 2-14
		return $value;
	}


	/**
	 * @param mixed $target
	 * @param mixed $func
	 * 
	 * @return HxClosure
	 */
	static public function closure ($target, $func) {
		#/usr/share/haxe/std/php7/Boot.hx:246: characters 2-36
		return new HxClosure($target, $func);
	}


	/**
	 * @return HxClass
	 */
	static public function closureHxClass () {
		#/usr/share/haxe/std/php7/Boot.hx:260: characters 2-23
		return Boot::getClass(HxClosure::class);
	}


	/**
	 * @param mixed $data
	 * 
	 * @return mixed
	 */
	static public function createAnon ($data) {
		#/usr/share/haxe/std/php7/Boot.hx:490: characters 2-25
		return new HxAnon($data);
	}


	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function deref ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:483: characters 2-14
		return $value;
	}


	/**
	 * @param mixed $value
	 * @param string $field
	 * 
	 * @return mixed
	 */
	static public function dynamicField ($value, $field) {
		#/usr/share/haxe/std/php7/Boot.hx:504: lines 504-506
		if (method_exists($value, $field)) {
			#/usr/share/haxe/std/php7/Boot.hx:505: characters 3-31
			return new HxClosure($value, $field);
		}
		#/usr/share/haxe/std/php7/Boot.hx:507: lines 507-509
		if (is_string($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:508: characters 3-50
			$value = new HxDynamicStr($value);
		}
		#/usr/share/haxe/std/php7/Boot.hx:510: characters 25-30
		$tmp = $value;
		#/usr/share/haxe/std/php7/Boot.hx:510: characters 32-37
		$tmp1 = $field;
		#/usr/share/haxe/std/php7/Boot.hx:510: characters 2-38
		return $tmp->{$tmp1};
	}


	/**
	 * @param string $phpClassName
	 * 
	 * @return bool
	 */
	static public function ensureLoaded ($phpClassName) {
		#/usr/share/haxe/std/php7/Boot.hx:497: characters 9-83
		if (!class_exists($phpClassName)) {
			#/usr/share/haxe/std/php7/Boot.hx:497: characters 46-83
			return interface_exists($phpClassName);
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:497: characters 9-83
			return true;
		}
	}


	/**
	 * @param mixed $left
	 * @param mixed $right
	 * 
	 * @return bool
	 */
	static public function equal ($left, $right) {
		#/usr/share/haxe/std/php7/Boot.hx:374: lines 374-376
		if ((is_int($left) || is_float($left)) && (is_int($right) || is_float($right))) {
			#/usr/share/haxe/std/php7/Boot.hx:375: characters 3-41
			return ($left == $right);
		}
		#/usr/share/haxe/std/php7/Boot.hx:377: characters 2-41
		return ($left === $right);
	}


	/**
	 * @param string $phpClassName
	 * 
	 * @return HxClass
	 */
	static public function getClass ($phpClassName) {
		#/usr/share/haxe/std/php7/Boot.hx:150: lines 150-152
		if (HxString::charAt($phpClassName, 0) === "\\") {
			#/usr/share/haxe/std/php7/Boot.hx:151: characters 3-40
			$phpClassName = HxString::substr($phpClassName, 1);
		}
		#/usr/share/haxe/std/php7/Boot.hx:153: lines 153-155
		if (!isset(Boot::$classes[$phpClassName])) {
			#/usr/share/haxe/std/php7/Boot.hx:154: characters 3-52
			Boot::$classes[$phpClassName] = new HxClass($phpClassName);
		}
		#/usr/share/haxe/std/php7/Boot.hx:157: characters 9-30
		return Boot::$classes[$phpClassName];
	}


	/**
	 * @param string $phpClassName
	 * 
	 * @return string
	 */
	static public function getClassName ($phpClassName) {
		#/usr/share/haxe/std/php7/Boot.hx:178: characters 2-39
		$hxClass = Boot::getClass($phpClassName);
		#/usr/share/haxe/std/php7/Boot.hx:179: characters 2-34
		$name = Boot::getHaxeName($hxClass);
		#/usr/share/haxe/std/php7/Boot.hx:180: characters 9-53
		if ($name === null) {
			#/usr/share/haxe/std/php7/Boot.hx:180: characters 25-45
			return $hxClass->phpClassName;
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:180: characters 48-52
			return $name;
		}
	}


	/**
	 * @param HxClass $hxClass
	 * 
	 * @return string
	 */
	static public function getHaxeName ($hxClass) {
		#/usr/share/haxe/std/php7/Boot.hx:187: characters 10-30
		$_g = $hxClass->phpClassName;
		#/usr/share/haxe/std/php7/Boot.hx:187: characters 10-30
		switch ($_g) {
			case "Bool":
				#/usr/share/haxe/std/php7/Boot.hx:190: characters 16-29
				return "Bool";
				break;
			case "Class":
				#/usr/share/haxe/std/php7/Boot.hx:192: characters 17-31
				return "Class";
				break;
			case "Dynamic":
				#/usr/share/haxe/std/php7/Boot.hx:194: characters 19-35
				return "Dynamic";
				break;
			case "Enum":
				#/usr/share/haxe/std/php7/Boot.hx:193: characters 16-29
				return "Enum";
				break;
			case "Float":
				#/usr/share/haxe/std/php7/Boot.hx:191: characters 17-31
				return "Float";
				break;
			case "Int":
				#/usr/share/haxe/std/php7/Boot.hx:188: characters 15-27
				return "Int";
				break;
			case "String":
				#/usr/share/haxe/std/php7/Boot.hx:189: characters 18-33
				return "String";
				break;
			default:
								break;
		}

		#/usr/share/haxe/std/php7/Boot.hx:200: lines 200-206
		if (isset(Boot::$aliases[$hxClass->phpClassName])) {
			#/usr/share/haxe/std/php7/Boot.hx:201: characters 10-39
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (class_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			#/usr/share/haxe/std/php7/Boot.hx:203: characters 10-39
			return Boot::$aliases[$hxClass->phpClassName];
		} else if (interface_exists($hxClass->phpClassName) && isset(Boot::$aliases[$hxClass->phpClassName])) {
			#/usr/share/haxe/std/php7/Boot.hx:205: characters 10-39
			return Boot::$aliases[$hxClass->phpClassName];
		}
		#/usr/share/haxe/std/php7/Boot.hx:208: characters 2-13
		return null;
	}


	/**
	 * @return HxClass
	 */
	static public function getHxAnon () {
		#/usr/share/haxe/std/php7/Boot.hx:164: characters 2-20
		return Boot::getClass(HxAnon::class);
	}


	/**
	 * @return HxClass
	 */
	static public function getHxClass () {
		#/usr/share/haxe/std/php7/Boot.hx:171: characters 2-21
		return Boot::getClass(HxClass::class);
	}


	/**
	 * @param string $phpClassName
	 * 
	 * @return mixed
	 */
	static public function getMeta ($phpClassName) {
		#/usr/share/haxe/std/php7/Boot.hx:134: characters 2-28
		if (!class_exists($phpClassName)) {
			#/usr/share/haxe/std/php7/Boot.hx:134: characters 2-28
			interface_exists($phpClassName);
		}
		#/usr/share/haxe/std/php7/Boot.hx:135: characters 9-69
		if (isset(Boot::$meta[$phpClassName])) {
			#/usr/share/haxe/std/php7/Boot.hx:135: characters 44-62
			return Boot::$meta[$phpClassName];
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:135: characters 65-69
			return null;
		}
	}


	/**
	 * @param string $haxeName
	 * 
	 * @return string
	 */
	static public function getPhpName ($haxeName) {
		#/usr/share/haxe/std/php7/Boot.hx:216: characters 2-27
		$prefix = self::PHP_PREFIX;
		#/usr/share/haxe/std/php7/Boot.hx:217: characters 2-54
		$phpParts = (strlen($prefix) === 0 ? new \Array_hx() : \Array_hx::wrap([$prefix]));
		#/usr/share/haxe/std/php7/Boot.hx:219: characters 2-38
		$haxeParts = HxString::split($haxeName, ".");
		#/usr/share/haxe/std/php7/Boot.hx:220: lines 220-235
		$_g = 0;
		#/usr/share/haxe/std/php7/Boot.hx:220: lines 220-235
		while ($_g < $haxeParts->length) {
			#/usr/share/haxe/std/php7/Boot.hx:220: characters 7-11
			$part = ($haxeParts->arr[$_g] ?? null);
			#/usr/share/haxe/std/php7/Boot.hx:220: lines 220-235
			$_g = $_g + 1;
			#/usr/share/haxe/std/php7/Boot.hx:221: characters 11-29
			$_g1 = HxString::toLowerCase($part);
			#/usr/share/haxe/std/php7/Boot.hx:221: characters 11-29
			switch ($_g1) {
				case "__class__":
				case "__dir__":
				case "__file__":
				case "__function__":
				case "__halt_compiler":
				case "__line__":
				case "__method__":
				case "__namespace__":
				case "__trait__":
				case "abstract":
				case "and":
				case "array":
				case "as":
				case "bool":
				case "break":
				case "callable":
				case "case":
				case "catch":
				case "class":
				case "clone":
				case "const":
				case "continue":
				case "declare":
				case "default":
				case "die":
				case "do":
				case "echo":
				case "else":
				case "elseif":
				case "empty":
				case "enddeclare":
				case "endfor":
				case "endforeach":
				case "endif":
				case "endswitch":
				case "endwhile":
				case "eval":
				case "exit":
				case "extends":
				case "false":
				case "final":
				case "finally":
				case "float":
				case "for":
				case "foreach":
				case "function":
				case "global":
				case "goto":
				case "if":
				case "implements":
				case "include":
				case "include_once":
				case "instanceof":
				case "insteadof":
				case "int":
				case "interface":
				case "isset":
				case "iterable":
				case "list":
				case "namespace":
				case "new":
				case "null":
				case "or":
				case "parent":
				case "print":
				case "private":
				case "protected":
				case "public":
				case "require":
				case "require_once":
				case "return":
				case "static":
				case "string":
				case "switch":
				case "throw":
				case "trait":
				case "true":
				case "try":
				case "unset":
				case "use":
				case "var":
				case "void":
				case "while":
				case "xor":
				case "yield":
					#/usr/share/haxe/std/php7/Boot.hx:231: characters 6-19
					$part = ($part??'null') . "_hx";
					break;
				default:
										break;
			}

			#/usr/share/haxe/std/php7/Boot.hx:234: characters 3-22
			$phpParts->arr[$phpParts->length] = $part;
			#/usr/share/haxe/std/php7/Boot.hx:234: characters 3-22
			++$phpParts->length;

		}

		#/usr/share/haxe/std/php7/Boot.hx:237: characters 2-28
		return $phpParts->join("\\");
	}


	/**
	 * @return string
	 */
	static public function getPrefix () {
		#/usr/share/haxe/std/php7/Boot.hx:74: characters 2-44
		return self::PHP_PREFIX;
	}


	/**
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasGetter ($phpClassName, $property) {
		#/usr/share/haxe/std/php7/Boot.hx:95: characters 2-28
		if (!class_exists($phpClassName)) {
			#/usr/share/haxe/std/php7/Boot.hx:95: characters 2-28
			interface_exists($phpClassName);
		}
		#/usr/share/haxe/std/php7/Boot.hx:97: characters 2-18
		$has = false;
		#/usr/share/haxe/std/php7/Boot.hx:98: characters 2-70
		$phpClassName1 = $phpClassName;
		#/usr/share/haxe/std/php7/Boot.hx:99: lines 99-102
		while (true) {
			#/usr/share/haxe/std/php7/Boot.hx:100: characters 3-54
			$has = isset(Boot::$getters[$phpClassName1][$property]);
			#/usr/share/haxe/std/php7/Boot.hx:101: characters 3-55
			$phpClassName1 = get_parent_class($phpClassName1);
			#/usr/share/haxe/std/php7/Boot.hx:99: lines 99-102
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				#/usr/share/haxe/std/php7/Boot.hx:99: lines 99-102
				break;
			}
		}
		#/usr/share/haxe/std/php7/Boot.hx:104: characters 2-12
		return $has;
	}


	/**
	 * @param string $phpClassName
	 * @param string $property
	 * 
	 * @return bool
	 */
	static public function hasSetter ($phpClassName, $property) {
		#/usr/share/haxe/std/php7/Boot.hx:111: characters 2-28
		if (!class_exists($phpClassName)) {
			#/usr/share/haxe/std/php7/Boot.hx:111: characters 2-28
			interface_exists($phpClassName);
		}
		#/usr/share/haxe/std/php7/Boot.hx:113: characters 2-18
		$has = false;
		#/usr/share/haxe/std/php7/Boot.hx:114: characters 2-70
		$phpClassName1 = $phpClassName;
		#/usr/share/haxe/std/php7/Boot.hx:115: lines 115-118
		while (true) {
			#/usr/share/haxe/std/php7/Boot.hx:116: characters 3-54
			$has = isset(Boot::$setters[$phpClassName1][$property]);
			#/usr/share/haxe/std/php7/Boot.hx:117: characters 3-55
			$phpClassName1 = get_parent_class($phpClassName1);
			#/usr/share/haxe/std/php7/Boot.hx:115: lines 115-118
			if (!(!$has && ($phpClassName1 !== false) && class_exists($phpClassName1))) {
				#/usr/share/haxe/std/php7/Boot.hx:115: lines 115-118
				break;
			}
		}
		#/usr/share/haxe/std/php7/Boot.hx:120: characters 2-12
		return $has;
	}


	/**
	 * @param mixed $value
	 * @param HxClass $type
	 * 
	 * @return bool
	 */
	static public function is ($value, $type) {
		#/usr/share/haxe/std/php7/Boot.hx:395: characters 2-32
		if ($type === null) {
			#/usr/share/haxe/std/php7/Boot.hx:395: characters 20-32
			return false;
		}
		#/usr/share/haxe/std/php7/Boot.hx:397: characters 2-34
		$phpType = $type->phpClassName;
		#/usr/share/haxe/std/php7/Boot.hx:398: lines 398-431
		switch ($phpType) {
			case "Bool":
				#/usr/share/haxe/std/php7/Boot.hx:414: characters 4-26
				return is_bool($value);
				break;
			case "Dynamic":
				#/usr/share/haxe/std/php7/Boot.hx:400: characters 4-15
				return true;
				break;
			case "Class":
			case "Enum":
				#/usr/share/haxe/std/php7/Boot.hx:420: lines 420-425
				if (($value instanceof HxClass)) {
					#/usr/share/haxe/std/php7/Boot.hx:421: characters 5-59
					$valuePhpClass = $value->phpClassName;
					#/usr/share/haxe/std/php7/Boot.hx:422: characters 5-59
					$enumPhpClass = Boot::getClass(HxEnum::class)->phpClassName;
					#/usr/share/haxe/std/php7/Boot.hx:423: characters 5-73
					$isEnumType = is_subclass_of($valuePhpClass, $enumPhpClass);
					#/usr/share/haxe/std/php7/Boot.hx:424: characters 12-58
					if ($phpType === "Enum") {
						#/usr/share/haxe/std/php7/Boot.hx:424: characters 33-43
						return $isEnumType;
					} else {
						#/usr/share/haxe/std/php7/Boot.hx:424: characters 46-57
						return !$isEnumType;
					}
				}
				break;
			case "Float":
				#/usr/share/haxe/std/php7/Boot.hx:412: characters 11-45
				if (!is_float($value)) {
					#/usr/share/haxe/std/php7/Boot.hx:412: characters 31-45
					return is_int($value);
				} else {
					#/usr/share/haxe/std/php7/Boot.hx:412: characters 11-45
					return true;
				}
				break;
			case "Int":
				#/usr/share/haxe/std/php7/Boot.hx:402: lines 402-410
				if (is_int($value) || (is_float($value) && ((int)$value == $value) && !is_nan($value))) {
					#/usr/share/haxe/std/php7/Boot.hx:410: characters 8-39
					return abs($value) <= 2147483648;
				} else {
					#/usr/share/haxe/std/php7/Boot.hx:402: lines 402-410
					return false;
				}
				break;
			case "String":
				#/usr/share/haxe/std/php7/Boot.hx:416: characters 4-28
				return is_string($value);
				break;
			case "php\\NativeArray":
			case "php\\_NativeArray\\NativeArray_Impl_":
				#/usr/share/haxe/std/php7/Boot.hx:418: characters 4-27
				return is_array($value);
				break;
			default:
				#/usr/share/haxe/std/php7/Boot.hx:427: lines 427-430
				if (is_object($value)) {
					#/usr/share/haxe/std/php7/Boot.hx:428: characters 5-41
					$type1 = $type;
					#/usr/share/haxe/std/php7/Boot.hx:429: characters 30-35
					$tmp = $value;
					#/usr/share/haxe/std/php7/Boot.hx:429: characters 37-41
					$tmp1 = $type1;
					#/usr/share/haxe/std/php7/Boot.hx:429: characters 5-42
					return ($tmp instanceof $tmp1->phpClassName);
				}
				break;
		}
		#/usr/share/haxe/std/php7/Boot.hx:432: characters 2-14
		return false;
	}


	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isClass ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:439: characters 2-31
		return ($value instanceof HxClass);
	}


	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isEnumValue ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:446: characters 2-30
		return ($value instanceof HxEnum);
	}


	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isFunction ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:453: characters 9-59
		if (!($value instanceof \Closure)) {
			#/usr/share/haxe/std/php7/Boot.hx:453: characters 35-59
			return ($value instanceof HxClosure);
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:453: characters 9-59
			return true;
		}
	}


	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isHxClosure ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:460: characters 2-33
		return ($value instanceof HxClosure);
	}


	/**
	 * @param mixed $value
	 * 
	 * @return bool
	 */
	static public function isNumber ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:367: characters 9-43
		if (!is_int($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:367: characters 27-43
			return is_float($value);
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:367: characters 9-43
			return true;
		}
	}


	/**
	 * @param string $phpClassName
	 * @param string $haxeClassName
	 * 
	 * @return void
	 */
	static public function registerClass ($phpClassName, $haxeClassName) {
		#/usr/share/haxe/std/php7/Boot.hx:142: characters 2-39
		Boot::$aliases[$phpClassName] = $haxeClassName;
	}


	/**
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerGetters ($phpClassName, $list) {
		#/usr/share/haxe/std/php7/Boot.hx:81: characters 2-30
		Boot::$getters[$phpClassName] = $list;
	}


	/**
	 * @param string $phpClassName
	 * @param mixed $data
	 * 
	 * @return void
	 */
	static public function registerMeta ($phpClassName, $data) {
		#/usr/share/haxe/std/php7/Boot.hx:127: characters 2-27
		Boot::$meta[$phpClassName] = $data;
	}


	/**
	 * @param string $phpClassName
	 * @param mixed $list
	 * 
	 * @return void
	 */
	static public function registerSetters ($phpClassName, $list) {
		#/usr/share/haxe/std/php7/Boot.hx:88: characters 2-30
		Boot::$setters[$phpClassName] = $list;
	}


	/**
	 * @param int $left
	 * @param int $right
	 * 
	 * @return int
	 */
	static public function shiftRightUnsigned ($left, $right) {
		#/usr/share/haxe/std/php7/Boot.hx:467: lines 467-473
		if ($right === 0) {
			#/usr/share/haxe/std/php7/Boot.hx:468: characters 3-14
			return $left;
		} else if ($left >= 0) {
			#/usr/share/haxe/std/php7/Boot.hx:470: characters 3-25
			return $left >> $right;
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:472: characters 3-55
			return ($left >> $right) & (2147483647 >> ($right - 1));
		}
	}


	/**
	 * @param mixed $value
	 * 
	 * @return string
	 */
	static public function stringify ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:317: lines 317-319
		if ($value === null) {
			#/usr/share/haxe/std/php7/Boot.hx:318: characters 3-16
			return "null";
		}
		#/usr/share/haxe/std/php7/Boot.hx:320: lines 320-322
		if (is_string($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:321: characters 3-15
			return $value;
		}
		#/usr/share/haxe/std/php7/Boot.hx:323: lines 323-325
		if (is_int($value) || is_float($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:324: characters 3-30
			return (string)$value;
		}
		#/usr/share/haxe/std/php7/Boot.hx:326: lines 326-328
		if (is_bool($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:327: characters 10-34
			if ($value) {
				#/usr/share/haxe/std/php7/Boot.hx:327: characters 19-23
				return "true";
			} else {
				#/usr/share/haxe/std/php7/Boot.hx:327: characters 28-33
				return "false";
			}
		}
		#/usr/share/haxe/std/php7/Boot.hx:329: lines 329-335
		if (is_array($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:330: characters 3-36
			$strings = [];
			#/usr/share/haxe/std/php7/Boot.hx:331: lines 331-333
			foreach ($value as $key => $item) {
				#/usr/share/haxe/std/php7/Boot.hx:332: characters 31-70
				$tmp = ($key??'null') . " => " . (Boot::stringify($item)??'null');
				#/usr/share/haxe/std/php7/Boot.hx:332: characters 4-71
				array_push($strings, $tmp);
			};
			#/usr/share/haxe/std/php7/Boot.hx:334: characters 3-51
			return "[" . (implode(", ", $strings)??'null') . "]";
		}
		#/usr/share/haxe/std/php7/Boot.hx:336: lines 336-362
		if (is_object($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:337: lines 337-339
			if (method_exists($value, "toString")) {
				#/usr/share/haxe/std/php7/Boot.hx:338: characters 4-27
				return HxDynamicStr::wrap($value)->toString();
			}
			#/usr/share/haxe/std/php7/Boot.hx:340: lines 340-342
			if (method_exists($value, "__toString")) {
				#/usr/share/haxe/std/php7/Boot.hx:341: characters 4-29
				return $value->__toString();
			}
			#/usr/share/haxe/std/php7/Boot.hx:343: lines 343-353
			if (($value instanceof \StdClass)) {
				#/usr/share/haxe/std/php7/Boot.hx:344: characters 8-88
				$tmp1 = null;
				#/usr/share/haxe/std/php7/Boot.hx:344: characters 37-42
				$tmp2 = $value;
				#/usr/share/haxe/std/php7/Boot.hx:344: characters 45-53
				$tmp3 = "toString";
				#/usr/share/haxe/std/php7/Boot.hx:344: characters 8-88
				if (isset($tmp2->{$tmp3})) {
					#/usr/share/haxe/std/php7/Boot.hx:344: characters 8-88
					$tmp1 = is_callable(Boot::dynamicField($value, 'toString'));
				} else {
					#/usr/share/haxe/std/php7/Boot.hx:344: characters 8-88
					$tmp1 = false;
				}
				#/usr/share/haxe/std/php7/Boot.hx:344: lines 344-346
				if ($tmp1) {
					#/usr/share/haxe/std/php7/Boot.hx:345: characters 5-28
					return HxDynamicStr::wrap($value)->toString();
				}
				#/usr/share/haxe/std/php7/Boot.hx:347: characters 17-49
				$this1 = [];
				#/usr/share/haxe/std/php7/Boot.hx:347: characters 4-50
				$result = $this1;
				#/usr/share/haxe/std/php7/Boot.hx:348: characters 4-45
				$data = get_object_vars($value);
				#/usr/share/haxe/std/php7/Boot.hx:349: lines 349-351
				$_g_arr = array_keys($data);
				#/usr/share/haxe/std/php7/Boot.hx:349: lines 349-351
				$_g_hasMore = reset($_g_arr) !== false;
				#/usr/share/haxe/std/php7/Boot.hx:349: lines 349-351
				while ($_g_hasMore) {
					#/usr/share/haxe/std/php7/Boot.hx:349: lines 349-351
					$result1 = current($_g_arr);
					#/usr/share/haxe/std/php7/Boot.hx:349: lines 349-351
					$_g_hasMore = next($_g_arr) !== false;
					#/usr/share/haxe/std/php7/Boot.hx:349: lines 349-351
					$key1 = $result1;
					#/usr/share/haxe/std/php7/Boot.hx:350: characters 23-55
					$tmp4 = "" . ($key1??'null') . " : " . (Boot::stringify($data[$key1])??'null');
					#/usr/share/haxe/std/php7/Boot.hx:350: characters 5-56
					array_push($result, $tmp4);
				}

				#/usr/share/haxe/std/php7/Boot.hx:352: characters 4-53
				return "{ " . (implode(", ", $result)??'null') . " }";
			}
			#/usr/share/haxe/std/php7/Boot.hx:354: lines 354-356
			if (($value instanceof \Closure) || ($value instanceof HxClosure)) {
				#/usr/share/haxe/std/php7/Boot.hx:355: characters 4-23
				return "<function>";
			}
			#/usr/share/haxe/std/php7/Boot.hx:357: lines 357-361
			if (($value instanceof HxClass)) {
				#/usr/share/haxe/std/php7/Boot.hx:358: characters 4-71
				return "[class " . (Boot::getClassName($value->phpClassName)??'null') . "]";
			} else {
				#/usr/share/haxe/std/php7/Boot.hx:360: characters 4-67
				return "[object " . (Boot::getClassName(get_class($value))??'null') . "]";
			}
		}
		#/usr/share/haxe/std/php7/Boot.hx:363: characters 2-7
		throw new HxException("Unable to stringify value");
	}


	/**
	 * @param mixed $value
	 * @param object $infos
	 * 
	 * @return void
	 */
	static public function trace ($value, $infos) {
		#/usr/share/haxe/std/php7/Boot.hx:301: lines 301-303
		if ($infos !== null) {
			#/usr/share/haxe/std/php7/Boot.hx:302: characters 3-57
			echo("" . ($infos->fileName??'null') . ":" . ($infos->lineNumber??'null') . ": ");
		}
		#/usr/share/haxe/std/php7/Boot.hx:304: characters 2-31
		echo(Boot::stringify($value));
		#/usr/share/haxe/std/php7/Boot.hx:305: lines 305-309
		if ($infos->customParams !== null) {
			#/usr/share/haxe/std/php7/Boot.hx:306: lines 306-308
			$_g = 0;
			#/usr/share/haxe/std/php7/Boot.hx:306: lines 306-308
			$_g1 = $infos->customParams;
			#/usr/share/haxe/std/php7/Boot.hx:306: lines 306-308
			while ($_g < $_g1->length) {
				#/usr/share/haxe/std/php7/Boot.hx:306: characters 8-13
				$value1 = ($_g1->arr[$_g] ?? null);
				#/usr/share/haxe/std/php7/Boot.hx:306: lines 306-308
				$_g = $_g + 1;
				#/usr/share/haxe/std/php7/Boot.hx:307: characters 4-39
				echo("," . (Boot::stringify($value1)??'null'));
			}
		}
		#/usr/share/haxe/std/php7/Boot.hx:310: characters 2-19
		echo("\x0A");
	}


	/**
	 * @param HxClass $hxClass
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function typedCast ($hxClass, $value) {
		#/usr/share/haxe/std/php7/Boot.hx:268: characters 10-30
		$_g = $hxClass->phpClassName;
		#/usr/share/haxe/std/php7/Boot.hx:268: characters 10-30
		switch ($_g) {
			case "Bool":
				#/usr/share/haxe/std/php7/Boot.hx:278: lines 278-280
				if (is_bool($value)) {
					#/usr/share/haxe/std/php7/Boot.hx:279: characters 5-17
					return $value;
				}
				break;
			case "Float":
				#/usr/share/haxe/std/php7/Boot.hx:274: lines 274-276
				if (is_int($value) || is_float($value)) {
					#/usr/share/haxe/std/php7/Boot.hx:275: characters 5-28
					return floatval($value);
				}
				break;
			case "Int":
				#/usr/share/haxe/std/php7/Boot.hx:270: lines 270-272
				if (is_int($value) || is_float($value)) {
					#/usr/share/haxe/std/php7/Boot.hx:271: characters 5-32
					return intval($value);
				}
				break;
			case "String":
				#/usr/share/haxe/std/php7/Boot.hx:282: lines 282-284
				if (is_string($value)) {
					#/usr/share/haxe/std/php7/Boot.hx:283: characters 5-17
					return $value;
				}
				break;
			case "php\\NativeArray":
				#/usr/share/haxe/std/php7/Boot.hx:286: lines 286-288
				if (is_array($value)) {
					#/usr/share/haxe/std/php7/Boot.hx:287: characters 5-17
					return $value;
				}
				break;
			default:
				#/usr/share/haxe/std/php7/Boot.hx:290: lines 290-292
				if (is_object($value) && Boot::is($value, $hxClass)) {
					#/usr/share/haxe/std/php7/Boot.hx:291: characters 5-17
					return $value;
				}
				break;
		}

		#/usr/share/haxe/std/php7/Boot.hx:294: characters 2-7
		throw new HxException("Cannot cast " . (\Std::string($value)??'null') . " to " . (Boot::getClassName($hxClass->phpClassName)??'null'));
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

#/usr/share/haxe/std/php7/Boot.hx:51: lines 51-66
if (!defined("HAXE_CUSTOM_ERROR_HANDLER") || !HAXE_CUSTOM_ERROR_HANDLER) {
	#/usr/share/haxe/std/php7/Boot.hx:52: characters 3-59
	$previousLevel = error_reporting(E_ALL);
	#/usr/share/haxe/std/php7/Boot.hx:53: lines 53-60
	$previousHandler = set_error_handler(function ($errno, $errstr, $errfile, $errline) {
		#/usr/share/haxe/std/php7/Boot.hx:55: lines 55-57
		if ((error_reporting() & $errno) === 0) {
			#/usr/share/haxe/std/php7/Boot.hx:56: characters 6-18
			return false;
		}
		#/usr/share/haxe/std/php7/Boot.hx:58: characters 5-10
		throw new \ErrorException($errstr, 0, $errno, $errfile, $errline);
	});
	#/usr/share/haxe/std/php7/Boot.hx:62: lines 62-65
	if ($previousHandler !== null) {
		#/usr/share/haxe/std/php7/Boot.hx:63: characters 4-41
		error_reporting($previousLevel);
		#/usr/share/haxe/std/php7/Boot.hx:64: characters 4-45
		set_error_handler($previousHandler);
	}
}

$this1 = [];
self::$aliases = $this1;
$this1 = [];
self::$classes = $this1;
$this1 = [];
self::$getters = $this1;
$this1 = [];
self::$setters = $this1;
$this1 = [];
self::$meta = $this1;
	}
}


Boot::__hx__init();
Boot::registerClass(Boot::class, 'php.Boot');
