<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace php\_Boot;

use \php\Boot;

class HxDynamicStr {
	/**
	 * @var string
	 */
	static public $hxString;


	/**
	 * @var string
	 */
	public $str;


	/**
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	static public function wrap ($value) {
		#/usr/share/haxe/std/php7/Boot.hx:729: lines 729-733
		if (is_string($value)) {
			#/usr/share/haxe/std/php7/Boot.hx:730: characters 3-33
			return new HxDynamicStr($value);
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:732: characters 3-15
			return $value;
		}
	}


	/**
	 * @param string $str
	 * 
	 * @return void
	 */
	public function __construct ($str) {
		#/usr/share/haxe/std/php7/Boot.hx:737: characters 2-16
		$this->str = $str;
	}


	/**
	 * @param string $method
	 * @param mixed $args
	 * 
	 * @return mixed
	 */
	public function __call ($method, $args) {
		#/usr/share/haxe/std/php7/Boot.hx:761: characters 2-33
		array_unshift($args, $this->str);
		#/usr/share/haxe/std/php7/Boot.hx:762: characters 2-68
		return call_user_func_array((HxDynamicStr::$hxString??'null') . "::" . ($method??'null'), $args);
	}


	/**
	 * @param string $field
	 * 
	 * @return mixed
	 */
	public function __get ($field) {
		#/usr/share/haxe/std/php7/Boot.hx:742: lines 742-754
		switch ($field) {
			case "charAt":
				#/usr/share/haxe/std/php7/Boot.hx:746: characters 30-50
				$str = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:746: characters 30-50
				return function ($index)  use (&$str) {
					#/usr/share/haxe/std/php7/Boot.hx:746: characters 30-50
					return HxString::charAt($str, $index);
				};
				break;
			case "charCodeAt":
				#/usr/share/haxe/std/php7/Boot.hx:753: characters 30-54
				$str1 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:753: characters 30-54
				return function ($index1)  use (&$str1) {
					#/usr/share/haxe/std/php7/Boot.hx:753: characters 30-54
					return HxString::charCodeAt($str1, $index1);
				};
				break;
			case "indexOf":
				#/usr/share/haxe/std/php7/Boot.hx:747: characters 30-51
				$str2 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:747: characters 30-51
				return function ($search)  use (&$str2) {
					#/usr/share/haxe/std/php7/Boot.hx:747: characters 30-51
					return HxString::indexOf($str2, $search);
				};
				break;
			case "lastIndexOf":
				#/usr/share/haxe/std/php7/Boot.hx:748: characters 30-55
				$str3 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:748: characters 30-55
				return function ($search1)  use (&$str3) {
					#/usr/share/haxe/std/php7/Boot.hx:748: characters 30-55
					return HxString::lastIndexOf($str3, $search1);
				};
				break;
			case "length":
				#/usr/share/haxe/std/php7/Boot.hx:743: characters 23-40
				return strlen($this->str);
				break;
			case "split":
				#/usr/share/haxe/std/php7/Boot.hx:749: characters 30-49
				$str4 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:749: characters 30-49
				return function ($delimiter)  use (&$str4) {
					#/usr/share/haxe/std/php7/Boot.hx:749: characters 30-49
					return HxString::split($str4, $delimiter);
				};
				break;
			case "substr":
				#/usr/share/haxe/std/php7/Boot.hx:752: characters 30-50
				$str5 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:752: characters 30-50
				return function ($pos)  use (&$str5) {
					#/usr/share/haxe/std/php7/Boot.hx:752: characters 30-50
					return HxString::substr($str5, $pos);
				};
				break;
			case "substring":
				#/usr/share/haxe/std/php7/Boot.hx:751: characters 30-53
				$str6 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:751: characters 30-53
				return function ($startIndex)  use (&$str6) {
					#/usr/share/haxe/std/php7/Boot.hx:751: characters 30-53
					return HxString::substring($str6, $startIndex);
				};
				break;
			case "toLowerCase":
				#/usr/share/haxe/std/php7/Boot.hx:745: characters 30-55
				$str7 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:745: characters 30-55
				return function ()  use (&$str7) {
					#/usr/share/haxe/std/php7/Boot.hx:745: characters 30-55
					return HxString::toLowerCase($str7);
				};
				break;
			case "toString":
				#/usr/share/haxe/std/php7/Boot.hx:750: characters 30-52
				$str8 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:750: characters 30-52
				return function ()  use (&$str8) {
					#/usr/share/haxe/std/php7/Boot.hx:750: characters 30-52
					return HxString::toString($str8);
				};
				break;
			case "toUpperCase":
				#/usr/share/haxe/std/php7/Boot.hx:744: characters 30-55
				$str9 = $this->str;
				#/usr/share/haxe/std/php7/Boot.hx:744: characters 30-55
				return function ()  use (&$str9) {
					#/usr/share/haxe/std/php7/Boot.hx:744: characters 30-55
					return HxString::toUpperCase($str9);
				};
				break;
		}
		#/usr/share/haxe/std/php7/Boot.hx:756: characters 25-28
		$tmp = $this->str;
		#/usr/share/haxe/std/php7/Boot.hx:756: characters 30-35
		$tmp1 = $field;
		#/usr/share/haxe/std/php7/Boot.hx:756: characters 2-36
		return $tmp->{$tmp1};
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


self::$hxString = Boot::getClass(HxString::class)->phpClassName;
	}
}


Boot::registerClass(HxDynamicStr::class, 'php._Boot.HxDynamicStr');
HxDynamicStr::__hx__init();
