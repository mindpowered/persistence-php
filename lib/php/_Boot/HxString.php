<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace php\_Boot;

use \php\Boot;

class HxString {
	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return string
	 */
	static public function charAt ($str, $index) {
		#/usr/share/haxe/std/php7/Boot.hx:634: lines 634-638
		if (($index < 0) || ($index >= strlen($str))) {
			#/usr/share/haxe/std/php7/Boot.hx:635: characters 3-12
			return "";
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:637: characters 3-35
			return $str[$index];
		}
	}


	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function charCodeAt ($str, $index) {
		#/usr/share/haxe/std/php7/Boot.hx:642: lines 642-646
		if (($index < 0) || ($index >= strlen($str))) {
			#/usr/share/haxe/std/php7/Boot.hx:643: characters 3-14
			return null;
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:645: characters 3-47
			return ord($str[$index]);
		}
	}


	/**
	 * @param int $code
	 * 
	 * @return string
	 */
	static public function fromCharCode ($code) {
		#/usr/share/haxe/std/php7/Boot.hx:711: characters 2-25
		return chr($code);
	}


	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function indexOf ($str, $search, $startIndex = null) {
		#/usr/share/haxe/std/php7/Boot.hx:650: lines 650-654
		if ($startIndex === null) {
			#/usr/share/haxe/std/php7/Boot.hx:651: characters 3-17
			$startIndex = 0;
		} else if ($startIndex < 0) {
			#/usr/share/haxe/std/php7/Boot.hx:653: characters 3-27
			$startIndex = $startIndex + strlen($str);
		}
		#/usr/share/haxe/std/php7/Boot.hx:655: characters 2-53
		$index = strpos($str, $search, $startIndex);
		#/usr/share/haxe/std/php7/Boot.hx:656: characters 9-38
		if ($index === false) {
			#/usr/share/haxe/std/php7/Boot.hx:656: characters 27-29
			return -1;
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:656: characters 32-37
			return $index;
		}
	}


	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	static public function lastIndexOf ($str, $search, $startIndex = null) {
		#/usr/share/haxe/std/php7/Boot.hx:660: characters 2-94
		$index = strrpos($str, $search, ($startIndex === null ? 0 : $startIndex - strlen($str)));
		#/usr/share/haxe/std/php7/Boot.hx:661: lines 661-665
		if ($index === false) {
			#/usr/share/haxe/std/php7/Boot.hx:662: characters 3-12
			return -1;
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:664: characters 3-15
			return $index;
		}
	}


	/**
	 * @param string $str
	 * @param string $delimiter
	 * 
	 * @return \Array_hx
	 */
	static public function split ($str, $delimiter) {
		#/usr/share/haxe/std/php7/Boot.hx:669: lines 669-673
		if ($delimiter === "") {
			#/usr/share/haxe/std/php7/Boot.hx:670: characters 3-59
			return \Array_hx::wrap(str_split($str));
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:672: characters 3-68
			return \Array_hx::wrap(explode($delimiter, $str));
		}
	}


	/**
	 * @param string $str
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	static public function substr ($str, $pos, $len = null) {
		#/usr/share/haxe/std/php7/Boot.hx:677: lines 677-681
		if ($pos < -strlen($str)) {
			#/usr/share/haxe/std/php7/Boot.hx:678: characters 3-10
			$pos = 0;
		} else if ($pos >= strlen($str)) {
			#/usr/share/haxe/std/php7/Boot.hx:680: characters 3-12
			return "";
		}
		#/usr/share/haxe/std/php7/Boot.hx:682: lines 682-687
		if ($len === null) {
			#/usr/share/haxe/std/php7/Boot.hx:683: characters 3-33
			return substr($str, $pos);
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:685: characters 3-45
			$result = substr($str, $pos, $len);
			#/usr/share/haxe/std/php7/Boot.hx:686: characters 10-41
			if ($result === false) {
				#/usr/share/haxe/std/php7/Boot.hx:686: characters 29-31
				return "";
			} else {
				#/usr/share/haxe/std/php7/Boot.hx:686: characters 34-40
				return $result;
			}
		}
	}


	/**
	 * @param string $str
	 * @param int $startIndex
	 * @param int $endIndex
	 * 
	 * @return string
	 */
	static public function substring ($str, $startIndex, $endIndex = null) {
		#/usr/share/haxe/std/php7/Boot.hx:691: lines 691-695
		if ($endIndex === null) {
			#/usr/share/haxe/std/php7/Boot.hx:692: characters 3-24
			$endIndex = strlen($str);
		} else if ($endIndex < 0) {
			#/usr/share/haxe/std/php7/Boot.hx:694: characters 3-15
			$endIndex = 0;
		}
		#/usr/share/haxe/std/php7/Boot.hx:696: characters 2-36
		if ($startIndex < 0) {
			#/usr/share/haxe/std/php7/Boot.hx:696: characters 22-36
			$startIndex = 0;
		}
		#/usr/share/haxe/std/php7/Boot.hx:697: lines 697-701
		if ($startIndex > $endIndex) {
			#/usr/share/haxe/std/php7/Boot.hx:698: characters 3-22
			$tmp = $endIndex;
			#/usr/share/haxe/std/php7/Boot.hx:699: characters 3-24
			$endIndex = $startIndex;
			#/usr/share/haxe/std/php7/Boot.hx:700: characters 3-19
			$startIndex = $tmp;
		}
		#/usr/share/haxe/std/php7/Boot.hx:702: characters 2-69
		$result = substr($str, $startIndex, $endIndex - $startIndex);
		#/usr/share/haxe/std/php7/Boot.hx:703: characters 9-40
		if ($result === false) {
			#/usr/share/haxe/std/php7/Boot.hx:703: characters 28-30
			return "";
		} else {
			#/usr/share/haxe/std/php7/Boot.hx:703: characters 33-39
			return $result;
		}
	}


	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toLowerCase ($str) {
		#/usr/share/haxe/std/php7/Boot.hx:630: characters 2-31
		return strtolower($str);
	}


	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toString ($str) {
		#/usr/share/haxe/std/php7/Boot.hx:707: characters 2-12
		return $str;
	}


	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	static public function toUpperCase ($str) {
		#/usr/share/haxe/std/php7/Boot.hx:626: characters 2-31
		return strtoupper($str);
	}
}


Boot::registerClass(HxString::class, 'php._Boot.HxString');
