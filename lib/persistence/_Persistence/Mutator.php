<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace persistence\_Persistence;

use \php\_Boot\HxClosure;
use \php\_Boot\HxException;
use \php\Boot;
use \php\_Boot\HxAnon;

class Mutator {


	/**
	 * @var string
	 */
	public $recordType;
	/**
	 * @var mixed
	 */
	public $strategyMethod;
	/**
	 * @var mixed
	 */
	public $updateMapper;


	/**
	 * @param string $recordType
	 * @param mixed $strategyMethod
	 * @param mixed $updateMapper
	 * 
	 * @return void
	 */
	public function __construct ($recordType, $strategyMethod, $updateMapper) {
		#/src/persistence/Persistence.hx:170: lines 170-172
		if (!Boot::is($strategyMethod, Boot::getClass('String')) && !(($strategyMethod instanceof \Closure) || ($strategyMethod instanceof HxClosure))) {
			#/src/persistence/Persistence.hx:171: characters 3-8
			throw new HxException("strategyMethod must be a string or function");
		}
		#/src/persistence/Persistence.hx:173: lines 173-175
		if (!Boot::is($updateMapper, Boot::getClass('String')) && !(($updateMapper instanceof \Closure) || ($updateMapper instanceof HxClosure))) {
			#/src/persistence/Persistence.hx:174: characters 3-8
			throw new HxException("updateMapper must be a string or function");
		}
		#/src/persistence/Persistence.hx:176: characters 2-30
		$this->recordType = $recordType;
		#/src/persistence/Persistence.hx:177: characters 2-38
		$this->strategyMethod = $strategyMethod;
		#/src/persistence/Persistence.hx:178: characters 2-34
		$this->updateMapper = $updateMapper;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(Mutator::class, 'persistence._Persistence.Mutator');
Boot::registerMeta(Mutator::class, new HxAnon([
	"obj" => new HxAnon([
		"SuppressWarnings" => \Array_hx::wrap(["checkstyle:FieldDocComment"]),
	]),
]));
Mutator::__hx__init();
