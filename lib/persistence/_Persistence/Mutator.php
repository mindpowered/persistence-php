<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace persistence\_Persistence;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxClosure;

/**
 * Mutator
 */
class Mutator {

	/**
	 * @var string
	 */
	public $recordType;
	/**
	 * @var mixed
	 */
	public $strategyMethod;
	/**
	 * @var mixed
	 */
	public $updateMapper;
	/**
	 * @var bool
	 */
	public $useRecordDataAsParams;

	/**
	 * @param string $recordType
	 * @param mixed $strategyMethod
	 * @param mixed $updateMapper
	 * @param bool $useRecordDataAsParams
	 * 
	 * @return void
	 */
	public function __construct ($recordType, $strategyMethod, $updateMapper, $useRecordDataAsParams) {
		#/src/persistence/Persistence.hx:316: characters 7-77
		$tmp = null;
		if (!is_string($strategyMethod)) {
			#/src/persistence/Persistence.hx:316: characters 43-77
			$f = $strategyMethod;
			#/src/persistence/Persistence.hx:316: characters 7-77
			$tmp = !(($f instanceof \Closure) || ($f instanceof HxClosure));
		} else {
			$tmp = false;
		}
		#/src/persistence/Persistence.hx:316: lines 316-318
		if ($tmp) {
			#/src/persistence/Persistence.hx:317: characters 4-9
			throw Exception::thrown("strategyMethod must be a string or function");
		}
		#/src/persistence/Persistence.hx:319: characters 7-73
		$tmp = null;
		if (!is_string($updateMapper)) {
			#/src/persistence/Persistence.hx:319: characters 41-73
			$f = $updateMapper;
			#/src/persistence/Persistence.hx:319: characters 7-73
			$tmp = !(($f instanceof \Closure) || ($f instanceof HxClosure));
		} else {
			$tmp = false;
		}
		#/src/persistence/Persistence.hx:319: lines 319-321
		if ($tmp) {
			#/src/persistence/Persistence.hx:320: characters 4-9
			throw Exception::thrown("updateMapper must be a string or function");
		}
		#/src/persistence/Persistence.hx:322: characters 3-31
		$this->recordType = $recordType;
		#/src/persistence/Persistence.hx:323: characters 3-39
		$this->strategyMethod = $strategyMethod;
		#/src/persistence/Persistence.hx:324: characters 3-35
		$this->updateMapper = $updateMapper;
		#/src/persistence/Persistence.hx:325: characters 3-53
		$this->useRecordDataAsParams = $useRecordDataAsParams;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(Mutator::class, 'persistence._Persistence.Mutator');
Boot::registerMeta(Mutator::class, new HxAnon(["obj" => new HxAnon(["SuppressWarnings" => \Array_hx::wrap(["checkstyle:FieldDocComment"])])]));
Mutator::__hx__init();
