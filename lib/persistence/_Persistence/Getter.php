<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace persistence\_Persistence;

use \php\_Boot\HxClosure;
use \php\_Boot\HxException;
use \php\Boot;
use \php\_Boot\HxAnon;

class Getter {


	/**
	 * @var mixed
	 */
	public $queryMapper;
	/**
	 * @var string
	 */
	public $recordType;
	/**
	 * @var mixed
	 */
	public $resultMapper;
	/**
	 * @var mixed
	 */
	public $strategyMethod;


	/**
	 * @param string $recordType
	 * @param mixed $strategyMethod
	 * @param mixed $queryMapper
	 * @param mixed $resultMapper
	 * 
	 * @return void
	 */
	public function __construct ($recordType, $strategyMethod, $queryMapper, $resultMapper) {
		#/src/persistence/Persistence.hx:193: lines 193-195
		if (!Boot::is($strategyMethod, Boot::getClass('String')) && !(($strategyMethod instanceof \Closure) || ($strategyMethod instanceof HxClosure))) {
			#/src/persistence/Persistence.hx:194: characters 3-8
			throw new HxException("strategyMethod must be a string or function");
		}
		#/src/persistence/Persistence.hx:196: lines 196-198
		if (!Boot::is($queryMapper, Boot::getClass('String')) && !(($queryMapper instanceof \Closure) || ($queryMapper instanceof HxClosure))) {
			#/src/persistence/Persistence.hx:197: characters 3-8
			throw new HxException("queryMapper must be a string or function");
		}
		#/src/persistence/Persistence.hx:199: lines 199-201
		if (!Boot::is($resultMapper, Boot::getClass('String')) && !(($resultMapper instanceof \Closure) || ($resultMapper instanceof HxClosure))) {
			#/src/persistence/Persistence.hx:200: characters 3-8
			throw new HxException("resultMapper must be a string or function");
		}
		#/src/persistence/Persistence.hx:202: characters 2-30
		$this->recordType = $recordType;
		#/src/persistence/Persistence.hx:203: characters 2-38
		$this->strategyMethod = $strategyMethod;
		#/src/persistence/Persistence.hx:204: characters 2-32
		$this->queryMapper = $queryMapper;
		#/src/persistence/Persistence.hx:205: characters 2-34
		$this->resultMapper = $resultMapper;
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(Getter::class, 'persistence._Persistence.Getter');
Boot::registerMeta(Getter::class, new HxAnon([
	"obj" => new HxAnon([
		"SuppressWarnings" => \Array_hx::wrap(["checkstyle:FieldDocComment"]),
	]),
]));
Getter::__hx__init();
