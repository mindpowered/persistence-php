<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace persistence\_Persistence;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \php\_Boot\HxClosure;

/**
 * Getter
 */
class Getter {

	/**
	 * @var mixed
	 */
	public $queryMapper;
	/**
	 * @var string
	 */
	public $recordType;
	/**
	 * @var mixed
	 */
	public $resultMapper;
	/**
	 * @var mixed
	 */
	public $strategyMethod;

	/**
	 * @param string $recordType
	 * @param mixed $strategyMethod
	 * @param mixed $queryMapper
	 * @param mixed $resultMapper
	 * 
	 * @return void
	 */
	public function __construct ($recordType, $strategyMethod, $queryMapper, $resultMapper) {
		#/src/persistence/Persistence.hx:202: characters 7-77
		$tmp = null;
		if (!is_string($strategyMethod)) {
			#/src/persistence/Persistence.hx:202: characters 43-77
			$f = $strategyMethod;
			#/src/persistence/Persistence.hx:202: characters 7-77
			$tmp = !(($f instanceof \Closure) || ($f instanceof HxClosure));
		} else {
			$tmp = false;
		}
		#/src/persistence/Persistence.hx:202: lines 202-204
		if ($tmp) {
			#/src/persistence/Persistence.hx:203: characters 4-9
			throw Exception::thrown("strategyMethod must be a string or function");
		}
		#/src/persistence/Persistence.hx:205: characters 7-71
		$tmp = null;
		if (!is_string($queryMapper)) {
			#/src/persistence/Persistence.hx:205: characters 40-71
			$f = $queryMapper;
			#/src/persistence/Persistence.hx:205: characters 7-71
			$tmp = !(($f instanceof \Closure) || ($f instanceof HxClosure));
		} else {
			$tmp = false;
		}
		#/src/persistence/Persistence.hx:205: lines 205-207
		if ($tmp) {
			#/src/persistence/Persistence.hx:206: characters 4-9
			throw Exception::thrown("queryMapper must be a string or function");
		}
		#/src/persistence/Persistence.hx:208: characters 7-73
		$tmp = null;
		if (!is_string($resultMapper)) {
			#/src/persistence/Persistence.hx:208: characters 41-73
			$f = $resultMapper;
			#/src/persistence/Persistence.hx:208: characters 7-73
			$tmp = !(($f instanceof \Closure) || ($f instanceof HxClosure));
		} else {
			$tmp = false;
		}
		#/src/persistence/Persistence.hx:208: lines 208-210
		if ($tmp) {
			#/src/persistence/Persistence.hx:209: characters 4-9
			throw Exception::thrown("resultMapper must be a string or function");
		}
		#/src/persistence/Persistence.hx:211: characters 3-31
		$this->recordType = $recordType;
		#/src/persistence/Persistence.hx:212: characters 3-39
		$this->strategyMethod = $strategyMethod;
		#/src/persistence/Persistence.hx:213: characters 3-33
		$this->queryMapper = $queryMapper;
		#/src/persistence/Persistence.hx:214: characters 3-35
		$this->resultMapper = $resultMapper;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(Getter::class, 'persistence._Persistence.Getter');
Boot::registerMeta(Getter::class, new HxAnon(["obj" => new HxAnon(["SuppressWarnings" => \Array_hx::wrap(["checkstyle:FieldDocComment"])])]));
Getter::__hx__init();
