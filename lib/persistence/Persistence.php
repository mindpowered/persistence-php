<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace persistence;

use \maglev\MagLevNumber;
use \maglev\MagLevString;
use \php\_Boot\HxAnon;
use \maglev\MagLevFunction;
use \maglev\MagLevNull;
use \php\Boot;
use \haxe\Exception;
use \maglev\_MagLev\MagLevType_Impl_;
use \maglev\MagLevResult;
use \persistence\_Persistence\Mutator;
use \maglev\MagLevAny;
use \persistence\_Persistence\Getter;
use \maglev\MagLev;
use \maglev\MagLevBoolean;
use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;
use \maglev\MagLevArray;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;
use \maglev\MagLevObject;

/**
 * Persistence
 */
class Persistence {

	/**
	 * @var StringMap
	 */
	public $getters;
	/**
	 * @var MagLev
	 */
	public $maglev;
	/**
	 * @var StringMap
	 */
	public $mutators;

	/**
	 * @param MagLev $bus
	 * 
	 * @return void
	 */
	public function __construct ($bus) {
		#/src/persistence/Persistence.hx:16: lines 16-68
		$_gthis = $this;
		#/src/persistence/Persistence.hx:17: characters 3-40
		$this->mutators = new StringMap();
		#/src/persistence/Persistence.hx:18: characters 3-38
		$this->getters = new StringMap();
		#/src/persistence/Persistence.hx:19: characters 3-20
		$this->maglev = $bus;
		#/src/persistence/Persistence.hx:20: lines 20-34
		$this->maglev->register("Persistence.AddMutator", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:21: characters 4-72
			$recordType = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/persistence/Persistence.hx:22: characters 4-75
			$operationName = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(1)))->getString();
			#/src/persistence/Persistence.hx:23: characters 4-56
			$strategyMethod = $_gthis->convertToHaxe($args->get(2));
			#/src/persistence/Persistence.hx:24: characters 4-32
			$updateMapper = null;
			#/src/persistence/Persistence.hx:25: lines 25-27
			if ($args->size() > 3) {
				#/src/persistence/Persistence.hx:26: characters 5-46
				$updateMapper = $_gthis->convertToHaxe($args->get(3));
			}
			#/src/persistence/Persistence.hx:28: characters 4-48
			$useRecordDataAsParams = null;
			#/src/persistence/Persistence.hx:29: lines 29-31
			if ($args->size() > 4) {
				#/src/persistence/Persistence.hx:30: characters 5-55
				$useRecordDataAsParams = $_gthis->convertToHaxe($args->get(4));
			}
			#/src/persistence/Persistence.hx:32: characters 4-99
			$_gthis->addMutator($recordType, $operationName, $strategyMethod, $updateMapper, $useRecordDataAsParams);
			#/src/persistence/Persistence.hx:33: characters 4-64
			return MagLevResult::fromResult(MagLevBoolean::fromBool(true));
		}));
		#/src/persistence/Persistence.hx:35: lines 35-53
		$this->maglev->register("Persistence.AddGetter", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:36: characters 4-72
			$recordType = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/persistence/Persistence.hx:37: characters 4-75
			$operationName = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(1)))->getString();
			#/src/persistence/Persistence.hx:38: characters 4-56
			$strategyMethod = $_gthis->convertToHaxe($args->get(2));
			#/src/persistence/Persistence.hx:39: characters 4-31
			$queryMapper = null;
			#/src/persistence/Persistence.hx:40: lines 40-42
			if ($args->size() >= 4) {
				#/src/persistence/Persistence.hx:41: characters 5-45
				$queryMapper = $_gthis->convertToHaxe($args->get(3));
			}
			#/src/persistence/Persistence.hx:43: characters 4-32
			$resultMapper = null;
			#/src/persistence/Persistence.hx:44: lines 44-46
			if ($args->size() >= 5) {
				#/src/persistence/Persistence.hx:45: characters 5-46
				$resultMapper = $_gthis->convertToHaxe($args->get(4));
			}
			#/src/persistence/Persistence.hx:47: characters 4-49
			$useQueryValuesAsParams = null;
			#/src/persistence/Persistence.hx:48: lines 48-50
			if ($args->size() >= 6) {
				#/src/persistence/Persistence.hx:49: characters 5-72
				$useQueryValuesAsParams = (Boot::typedCast(Boot::getClass(MagLevBoolean::class), $args->get(5)))->getBool();
			}
			#/src/persistence/Persistence.hx:51: characters 4-112
			$_gthis->addGetter($recordType, $operationName, $strategyMethod, $queryMapper, $resultMapper, $useQueryValuesAsParams);
			#/src/persistence/Persistence.hx:52: characters 4-64
			return MagLevResult::fromResult(MagLevBoolean::fromBool(true));
		}));
		#/src/persistence/Persistence.hx:54: lines 54-60
		$this->maglev->register("Persistence.Mutate", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:55: characters 4-72
			$recordType = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/persistence/Persistence.hx:56: characters 4-75
			$operationName = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(1)))->getString();
			#/src/persistence/Persistence.hx:57: characters 4-52
			$recordData = $_gthis->convertToHaxe($args->get(2));
			#/src/persistence/Persistence.hx:58: characters 4-49
			$_gthis->mutate($recordType, $operationName, $recordData);
			#/src/persistence/Persistence.hx:59: characters 4-64
			return MagLevResult::fromResult(MagLevBoolean::fromBool(true));
		}));
		#/src/persistence/Persistence.hx:61: lines 61-67
		$this->maglev->register("Persistence.Get", MagLevFunction::fromFunction(function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:62: characters 4-72
			$recordType = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(0)))->getString();
			#/src/persistence/Persistence.hx:63: characters 4-75
			$operationName = (Boot::typedCast(Boot::getClass(MagLevString::class), $args->get(1)))->getString();
			#/src/persistence/Persistence.hx:64: characters 4-53
			$queryValues = $_gthis->convertToHaxe($args->get(2));
			#/src/persistence/Persistence.hx:65: characters 4-75
			$ret = $_gthis->convertToMagLev($_gthis->get($recordType, $operationName, $queryValues));
			#/src/persistence/Persistence.hx:66: characters 4-39
			return MagLevResult::fromResult($ret);
		}));
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $strategyMethod
	 * @param mixed $queryMapper
	 * @param mixed $resultMapper
	 * @param bool $useQueryValuesAsParams
	 * 
	 * @return void
	 */
	public function addGetter ($recordType, $operationName, $strategyMethod, $queryMapper = null, $resultMapper = null, $useQueryValuesAsParams = null) {
		#/src/persistence/Persistence.hx:82: lines 82-84
		if ($queryMapper === null) {
			#/src/persistence/Persistence.hx:83: characters 4-41
			$queryMapper = function ($v) {
				#/src/persistence/Persistence.hx:83: characters 33-41
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:85: lines 85-87
		if ($resultMapper === null) {
			#/src/persistence/Persistence.hx:86: characters 4-42
			$resultMapper = function ($v) {
				#/src/persistence/Persistence.hx:86: characters 34-42
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:88: lines 88-90
		if ($useQueryValuesAsParams === null) {
			#/src/persistence/Persistence.hx:89: characters 4-34
			$useQueryValuesAsParams = false;
		}
		#/src/persistence/Persistence.hx:91: characters 3-106
		$getter = new Getter($recordType, $strategyMethod, $queryMapper, $resultMapper, $useQueryValuesAsParams);
		#/src/persistence/Persistence.hx:92: characters 3-65
		$this1 = $this->getters;
		$k = $this->calcKey($recordType, $operationName);
		$this1->data[$k] = $getter;
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $strategyMethod
	 * @param mixed $updateMapper
	 * @param bool $useRecordDataAsParams
	 * 
	 * @return void
	 */
	public function addMutator ($recordType, $operationName, $strategyMethod, $updateMapper = null, $useRecordDataAsParams = null) {
		#/src/persistence/Persistence.hx:71: lines 71-73
		if ($updateMapper === null) {
			#/src/persistence/Persistence.hx:72: characters 4-42
			$updateMapper = function ($v) {
				#/src/persistence/Persistence.hx:72: characters 34-42
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:74: lines 74-76
		if ($useRecordDataAsParams === null) {
			#/src/persistence/Persistence.hx:75: characters 4-33
			$useRecordDataAsParams = false;
		}
		#/src/persistence/Persistence.hx:77: characters 3-94
		$mutator = new Mutator($recordType, $strategyMethod, $updateMapper, $useRecordDataAsParams);
		#/src/persistence/Persistence.hx:78: characters 3-67
		$this1 = $this->mutators;
		$k = $this->calcKey($recordType, $operationName);
		$this1->data[$k] = $mutator;
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * 
	 * @return string
	 */
	public function calcKey ($recordType, $operationName) {
		#/src/persistence/Persistence.hx:193: characters 3-42
		return ($recordType??'null') . "." . ($operationName??'null');
	}

	/**
	 * @param MagLevAny $x
	 * 
	 * @return mixed
	 */
	public function convertToHaxe ($x) {
		#/src/persistence/Persistence.hx:197: lines 197-236
		if ($x->getType() === MagLevType_Impl_::$MagLevType_Null) {
			#/src/persistence/Persistence.hx:198: characters 4-15
			return null;
		} else if ($x->getType() === MagLevType_Impl_::$MagLevType_Boolean) {
			#/src/persistence/Persistence.hx:201: characters 4-35
			$y = Boot::typedCast(Boot::getClass(MagLevBoolean::class), $x);
			#/src/persistence/Persistence.hx:202: characters 4-22
			return $y->getBool();
		} else if ($x->getType() === MagLevType_Impl_::$MagLevType_String) {
			#/src/persistence/Persistence.hx:205: characters 4-34
			$y = Boot::typedCast(Boot::getClass(MagLevString::class), $x);
			#/src/persistence/Persistence.hx:206: characters 4-24
			return $y->getString();
		} else if ($x->getType() === MagLevType_Impl_::$MagLevType_Number) {
			#/src/persistence/Persistence.hx:209: characters 4-34
			$y = Boot::typedCast(Boot::getClass(MagLevNumber::class), $x);
			#/src/persistence/Persistence.hx:210: characters 4-23
			return $y->getFloat();
		} else if ($x->getType() === MagLevType_Impl_::$MagLevType_Array) {
			#/src/persistence/Persistence.hx:213: characters 4-33
			$y = Boot::typedCast(Boot::getClass(MagLevArray::class), $x);
			#/src/persistence/Persistence.hx:214: characters 4-42
			$arr = new \Array_hx();
			#/src/persistence/Persistence.hx:215: characters 4-14
			$i = 0;
			#/src/persistence/Persistence.hx:216: lines 216-219
			while ($i < $y->size()) {
				#/src/persistence/Persistence.hx:217: characters 5-38
				$x1 = $this->convertToHaxe($y->get($i));
				$arr->arr[$arr->length++] = $x1;
				#/src/persistence/Persistence.hx:218: characters 5-8
				++$i;
			}
			#/src/persistence/Persistence.hx:220: characters 4-14
			return $arr;
		} else if ($x->getType() === MagLevType_Impl_::$MagLevType_Object) {
			#/src/persistence/Persistence.hx:223: characters 4-34
			$y = Boot::typedCast(Boot::getClass(MagLevObject::class), $x);
			#/src/persistence/Persistence.hx:224: characters 4-52
			$map = new StringMap();
			#/src/persistence/Persistence.hx:225: characters 4-24
			$keys = $y->keys();
			#/src/persistence/Persistence.hx:226: characters 4-14
			$i = 0;
			#/src/persistence/Persistence.hx:227: lines 227-231
			while ($i < $keys->size()) {
				#/src/persistence/Persistence.hx:228: characters 5-66
				$key = (Boot::typedCast(Boot::getClass(MagLevString::class), $keys->get($i)))->getString();
				#/src/persistence/Persistence.hx:229: characters 5-44
				$value = $this->convertToHaxe($y->get($key));
				$map->data[$key] = $value;
				#/src/persistence/Persistence.hx:230: characters 5-8
				++$i;
			}
			#/src/persistence/Persistence.hx:232: characters 4-14
			return $map;
		} else {
			#/src/persistence/Persistence.hx:235: characters 4-9
			throw Exception::thrown("convertToHaxe: unknown type");
		}
	}

	/**
	 * @param mixed $x
	 * 
	 * @return MagLevAny
	 */
	public function convertToMagLev ($x) {
		#/src/persistence/Persistence.hx:240: lines 240-285
		if ($x === null) {
			#/src/persistence/Persistence.hx:241: characters 4-30
			return MagLevNull::create();
		} else if (is_bool($x)) {
			#/src/persistence/Persistence.hx:244: characters 4-48
			return MagLevBoolean::fromBool(Boot::typedCast(Boot::getClass('Bool'), $x));
		} else if (is_string($x)) {
			#/src/persistence/Persistence.hx:247: characters 4-51
			return MagLevString::fromString(Boot::typedCast(Boot::getClass('String'), $x));
		} else if (Boot::isOfType($x, Boot::getClass('Int'))) {
			#/src/persistence/Persistence.hx:250: characters 4-45
			return MagLevNumber::fromInt(Boot::typedCast(Boot::getClass('Int'), $x));
		} else if ((is_float($x) || is_int($x))) {
			#/src/persistence/Persistence.hx:253: characters 4-36
			return MagLevNumber::fromFloat($x);
		} else if (($x instanceof \Array_hx)) {
			#/src/persistence/Persistence.hx:256: characters 4-47
			$arr = MagLevArray::create();
			#/src/persistence/Persistence.hx:257: characters 4-25
			$y = $x;
			#/src/persistence/Persistence.hx:258: lines 258-260
			$_g = 0;
			while ($_g < $y->length) {
				#/src/persistence/Persistence.hx:258: characters 8-12
				$item = ($y->arr[$_g] ?? null);
				#/src/persistence/Persistence.hx:258: lines 258-260
				++$_g;
				#/src/persistence/Persistence.hx:259: characters 5-36
				$arr->push($this->convertToMagLev($item));
			}
			#/src/persistence/Persistence.hx:261: characters 4-14
			return $arr;
		} else if (($x instanceof StringMap)) {
			#/src/persistence/Persistence.hx:264: characters 4-32
			$map = $x;
			#/src/persistence/Persistence.hx:265: characters 4-49
			$obj = MagLevObject::create();
			#/src/persistence/Persistence.hx:266: characters 15-25
			$key = new NativeIndexedArrayIterator(array_values(array_map("strval", array_keys($map->data))));
			while ($key->hasNext()) {
				#/src/persistence/Persistence.hx:266: lines 266-268
				$key1 = $key->next();
				#/src/persistence/Persistence.hx:267: characters 5-48
				$obj->set($key1, $this->convertToMagLev(($map->data[$key1] ?? null)));
			}
			#/src/persistence/Persistence.hx:269: characters 4-14
			return $obj;
		} else if (\Reflect::isObject($x)) {
			#/src/persistence/Persistence.hx:272: characters 4-49
			$obj = MagLevObject::create();
			#/src/persistence/Persistence.hx:273: lines 273-276
			$_g = 0;
			$_g1 = \Reflect::fields($x);
			while ($_g < $_g1->length) {
				#/src/persistence/Persistence.hx:273: characters 9-14
				$field = ($_g1->arr[$_g] ?? null);
				#/src/persistence/Persistence.hx:273: lines 273-276
				++$_g;
				#/src/persistence/Persistence.hx:274: characters 5-45
				$val = \Reflect::getProperty($x, $field);
				#/src/persistence/Persistence.hx:275: characters 5-41
				$obj->set($field, $this->convertToMagLev($val));
			}
			#/src/persistence/Persistence.hx:277: characters 4-14
			return $obj;
		} else {
			#/src/persistence/Persistence.hx:279: characters 12-33
			$f = $x;
			#/src/persistence/Persistence.hx:279: lines 279-285
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:280: characters 4-40
				$f = $x;
				#/src/persistence/Persistence.hx:281: characters 4-41
				return MagLevFunction::fromFunction($f);
			} else {
				#/src/persistence/Persistence.hx:284: characters 4-9
				throw Exception::thrown("convertToMagLev: unknown type");
			}
		}
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $queryValues
	 * 
	 * @return mixed
	 */
	public function get ($recordType, $operationName, $queryValues) {
		#/src/persistence/Persistence.hx:136: characters 7-62
		$this1 = $this->getters;
		#/src/persistence/Persistence.hx:136: lines 136-189
		if (array_key_exists($this->calcKey($recordType, $operationName), $this1->data)) {
			#/src/persistence/Persistence.hx:137: characters 17-70
			$this1 = $this->getters;
			$key = $this->calcKey($recordType, $operationName);
			#/src/persistence/Persistence.hx:137: characters 4-71
			$getter = ($this1->data[$key] ?? null);
			#/src/persistence/Persistence.hx:139: characters 4-21
			$query = null;
			#/src/persistence/Persistence.hx:140: characters 8-46
			$f = $getter->queryMapper;
			#/src/persistence/Persistence.hx:140: lines 140-151
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:141: characters 5-53
				$queryMapper = $getter->queryMapper;
				#/src/persistence/Persistence.hx:142: characters 5-37
				$query = $queryMapper($queryValues);
			} else if (is_string($getter->queryMapper)) {
				#/src/persistence/Persistence.hx:145: characters 5-49
				$queryMapper = $getter->queryMapper;
				#/src/persistence/Persistence.hx:147: characters 5-93
				$query = $this->maglev->call($queryMapper, Boot::typedCast(Boot::getClass(MagLevArray::class), $this->convertToMagLev(\Array_hx::wrap([$queryValues]))));
			} else {
				#/src/persistence/Persistence.hx:150: characters 5-10
				throw Exception::thrown("queryMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:153: characters 4-26
			$raw_result = null;
			#/src/persistence/Persistence.hx:154: characters 8-49
			$f = $getter->strategyMethod;
			#/src/persistence/Persistence.hx:154: lines 154-170
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:155: characters 5-59
				$strategyMethod = $getter->strategyMethod;
				#/src/persistence/Persistence.hx:156: characters 5-39
				$raw_result = $strategyMethod($query);
			} else if (is_string($getter->strategyMethod)) {
				#/src/persistence/Persistence.hx:159: characters 5-55
				$strategyMethod = $getter->strategyMethod;
				#/src/persistence/Persistence.hx:160: lines 160-166
				if ($getter->useQueryValuesAsParams) {
					#/src/persistence/Persistence.hx:161: characters 6-126
					$raw_result_result = $this->maglev->call($getter->strategyMethod, Boot::typedCast(Boot::getClass(MagLevArray::class), $this->convertToMagLev($query)));
					#/src/persistence/Persistence.hx:162: characters 6-63
					$raw_result = $this->convertToHaxe($raw_result_result->getResult());
				} else {
					#/src/persistence/Persistence.hx:164: characters 43-140
					$raw_result = $this->maglev->call($getter->strategyMethod, Boot::typedCast(Boot::getClass(MagLevArray::class), $this->convertToMagLev(\Array_hx::wrap([$query]))));
					#/src/persistence/Persistence.hx:164: characters 6-141
					$raw_result_result = $raw_result;
					#/src/persistence/Persistence.hx:165: characters 6-63
					$raw_result = $this->convertToHaxe($raw_result_result->getResult());
				}
			} else {
				#/src/persistence/Persistence.hx:169: characters 5-10
				throw Exception::thrown("strategyMethod must be a string or function");
			}
			#/src/persistence/Persistence.hx:172: characters 4-22
			$result = null;
			#/src/persistence/Persistence.hx:173: characters 8-47
			$f = $getter->resultMapper;
			#/src/persistence/Persistence.hx:173: lines 173-184
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:174: characters 5-55
				$resultMapper = $getter->resultMapper;
				#/src/persistence/Persistence.hx:175: characters 5-38
				$result = $resultMapper($raw_result);
			} else if (is_string($getter->resultMapper)) {
				#/src/persistence/Persistence.hx:178: characters 5-51
				$resultMapper = $getter->resultMapper;
				#/src/persistence/Persistence.hx:180: characters 5-94
				$result = $this->maglev->call($resultMapper, Boot::typedCast(Boot::getClass(MagLevArray::class), $this->convertToMagLev(\Array_hx::wrap([$raw_result]))));
			} else {
				#/src/persistence/Persistence.hx:183: characters 5-10
				throw Exception::thrown("resultMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:185: characters 4-17
			return $result;
		} else {
			#/src/persistence/Persistence.hx:188: characters 4-9
			throw Exception::thrown("the specified getter has not been added");
		}
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $recordData
	 * 
	 * @return void
	 */
	public function mutate ($recordType, $operationName, $recordData) {
		#/src/persistence/Persistence.hx:96: characters 7-63
		$this1 = $this->mutators;
		#/src/persistence/Persistence.hx:96: lines 96-132
		if (array_key_exists($this->calcKey($recordType, $operationName), $this1->data)) {
			#/src/persistence/Persistence.hx:97: characters 18-72
			$this1 = $this->mutators;
			$key = $this->calcKey($recordType, $operationName);
			#/src/persistence/Persistence.hx:97: characters 4-73
			$mutator = ($this1->data[$key] ?? null);
			#/src/persistence/Persistence.hx:99: characters 4-22
			$params = null;
			#/src/persistence/Persistence.hx:100: characters 8-48
			$f = $mutator->updateMapper;
			#/src/persistence/Persistence.hx:100: lines 100-111
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:101: characters 5-56
				$updateMapper = $mutator->updateMapper;
				#/src/persistence/Persistence.hx:102: characters 5-38
				$params = $updateMapper($recordData);
			} else if (is_string($mutator->updateMapper)) {
				#/src/persistence/Persistence.hx:105: characters 5-52
				$updateMapper = $mutator->updateMapper;
				#/src/persistence/Persistence.hx:107: characters 5-94
				$params = $this->maglev->call($updateMapper, Boot::typedCast(Boot::getClass(MagLevArray::class), $this->convertToMagLev(\Array_hx::wrap([$recordData]))));
			} else {
				#/src/persistence/Persistence.hx:110: characters 5-10
				throw Exception::thrown("updateMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:113: characters 4-26
			$raw_result = null;
			#/src/persistence/Persistence.hx:114: characters 8-50
			$f = $mutator->strategyMethod;
			#/src/persistence/Persistence.hx:114: lines 114-128
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:115: characters 5-60
				$strategyMethod = $mutator->strategyMethod;
				#/src/persistence/Persistence.hx:116: characters 5-40
				$raw_result = $strategyMethod($params);
			} else if (is_string($mutator->strategyMethod)) {
				#/src/persistence/Persistence.hx:119: characters 5-56
				$strategyMethod = $mutator->strategyMethod;
				#/src/persistence/Persistence.hx:120: lines 120-124
				if ($mutator->useRecordDataAsParams) {
					#/src/persistence/Persistence.hx:121: characters 6-95
					$raw_result = $this->maglev->call($strategyMethod, Boot::typedCast(Boot::getClass(MagLevArray::class), $this->convertToMagLev($params)));
				} else {
					#/src/persistence/Persistence.hx:123: characters 6-97
					$raw_result = $this->maglev->call($strategyMethod, Boot::typedCast(Boot::getClass(MagLevArray::class), $this->convertToMagLev(\Array_hx::wrap([$params]))));
				}
			} else {
				#/src/persistence/Persistence.hx:127: characters 5-10
				throw Exception::thrown("strategyMethod must be a string or function");
			}
		} else {
			#/src/persistence/Persistence.hx:131: characters 4-9
			throw Exception::thrown("the specified mutator has not been added");
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(Persistence::class, 'persistence.Persistence');
Boot::registerMeta(Persistence::class, new HxAnon(["obj" => new HxAnon(["SuppressWarnings" => \Array_hx::wrap([\Array_hx::wrap([
	"checkstyle:FieldDocComment",
	"checkstyle:LocalVariableName",
	"checkstyle:MultipleStringLiterals",
	"checkstyle:MagicNumber",
])])])]));
Persistence::__hx__init();
