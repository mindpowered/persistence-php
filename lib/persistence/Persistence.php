<?php
/**
 * Generated by Haxe 4.0.0
 */

namespace persistence;

use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;
use \php\_Boot\HxException;
use \php\Boot;
use \persistence\_Persistence\Mutator;
use \persistence\_Persistence\Getter;
use \maglev\MagLev;
use \php\_Boot\HxAnon;

class Persistence {


	/**
	 * @var StringMap
	 */
	public $getters;
	/**
	 * @var MagLev
	 */
	public $maglev;
	/**
	 * @var StringMap
	 */
	public $mutators;


	/**
	 * @param MagLev $bus
	 * 
	 * @return void
	 */
	public function __construct ($bus) {
		#/src/persistence/Persistence.hx:16: lines 16-50
		$_gthis = $this;
		#/src/persistence/Persistence.hx:17: characters 2-39
		$this->mutators = new StringMap();
		#/src/persistence/Persistence.hx:18: characters 2-37
		$this->getters = new StringMap();
		#/src/persistence/Persistence.hx:19: characters 2-19
		$this->maglev = $bus;
		#/src/persistence/Persistence.hx:20: lines 20-27
		$this->maglev->register("Persistence.AddMutator", function ($args)  use (&$_gthis) {
			#/src/persistence/Persistence.hx:21: characters 3-35
			$recordType = ($args->arr[0] ?? null);
			#/src/persistence/Persistence.hx:22: characters 3-38
			$operationName = ($args->arr[1] ?? null);
			#/src/persistence/Persistence.hx:23: characters 3-36
			$strategyMethod = ($args->arr[2] ?? null);
			#/src/persistence/Persistence.hx:24: characters 3-34
			$updateMapper = ($args->arr[3] ?? null);
			#/src/persistence/Persistence.hx:25: characters 3-75
			$_gthis->addMutator($recordType, $operationName, $strategyMethod, $updateMapper);
			#/src/persistence/Persistence.hx:26: characters 3-14
			return true;
		});
		#/src/persistence/Persistence.hx:28: lines 28-36
		$this->maglev->register("Persistence.AddGetter", function ($args1)  use (&$_gthis) {
			#/src/persistence/Persistence.hx:29: characters 3-35
			$recordType1 = ($args1->arr[0] ?? null);
			#/src/persistence/Persistence.hx:30: characters 3-38
			$operationName1 = ($args1->arr[1] ?? null);
			#/src/persistence/Persistence.hx:31: characters 3-36
			$strategyMethod1 = ($args1->arr[2] ?? null);
			#/src/persistence/Persistence.hx:32: characters 3-33
			$queryMapper = ($args1->arr[3] ?? null);
			#/src/persistence/Persistence.hx:33: characters 3-34
			$resultMapper = ($args1->arr[4] ?? null);
			#/src/persistence/Persistence.hx:34: characters 3-87
			$_gthis->addGetter($recordType1, $operationName1, $strategyMethod1, $queryMapper, $resultMapper);
			#/src/persistence/Persistence.hx:35: characters 3-14
			return true;
		});
		#/src/persistence/Persistence.hx:37: lines 37-43
		$this->maglev->register("Persistence.Mutate", function ($args2)  use (&$_gthis) {
			#/src/persistence/Persistence.hx:38: characters 3-35
			$recordType2 = ($args2->arr[0] ?? null);
			#/src/persistence/Persistence.hx:39: characters 3-38
			$operationName2 = ($args2->arr[1] ?? null);
			#/src/persistence/Persistence.hx:40: characters 3-32
			$recordData = ($args2->arr[2] ?? null);
			#/src/persistence/Persistence.hx:41: characters 3-48
			$_gthis->mutate($recordType2, $operationName2, $recordData);
			#/src/persistence/Persistence.hx:42: characters 3-14
			return true;
		});
		#/src/persistence/Persistence.hx:44: lines 44-49
		$this->maglev->register("Persistence.Get", function ($args3)  use (&$_gthis) {
			#/src/persistence/Persistence.hx:45: characters 3-35
			$recordType3 = ($args3->arr[0] ?? null);
			#/src/persistence/Persistence.hx:46: characters 3-38
			$operationName3 = ($args3->arr[1] ?? null);
			#/src/persistence/Persistence.hx:47: characters 3-33
			$queryValues = ($args3->arr[2] ?? null);
			#/src/persistence/Persistence.hx:48: characters 3-53
			return $_gthis->get($recordType3, $operationName3, $queryValues);
		});
	}


	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $strategyMethod
	 * @param mixed $queryMapper
	 * @param mixed $resultMapper
	 * 
	 * @return void
	 */
	public function addGetter ($recordType, $operationName, $strategyMethod, $queryMapper = null, $resultMapper = null) {
		#/src/persistence/Persistence.hx:61: lines 61-63
		if ($queryMapper === null) {
			#/src/persistence/Persistence.hx:62: characters 3-36
			$queryMapper = function ($v) {
				#/src/persistence/Persistence.hx:62: characters 28-36
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:64: lines 64-66
		if ($resultMapper === null) {
			#/src/persistence/Persistence.hx:65: characters 3-37
			$resultMapper = function ($v1) {
				#/src/persistence/Persistence.hx:65: characters 29-37
				return $v1;
			};
		}
		#/src/persistence/Persistence.hx:67: characters 2-81
		$getter = new Getter($recordType, $strategyMethod, $queryMapper, $resultMapper);
		#/src/persistence/Persistence.hx:68: characters 2-64
		$this1 = $this->getters;
		#/src/persistence/Persistence.hx:68: characters 2-64
		$k = $this->calcKey($recordType, $operationName);
		#/src/persistence/Persistence.hx:68: characters 2-64
		$this1->data[$k] = $getter;

	}


	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $strategyMethod
	 * @param mixed $updateMapper
	 * 
	 * @return void
	 */
	public function addMutator ($recordType, $operationName, $strategyMethod, $updateMapper = null) {
		#/src/persistence/Persistence.hx:53: lines 53-55
		if ($updateMapper === null) {
			#/src/persistence/Persistence.hx:54: characters 3-37
			$updateMapper = function ($v) {
				#/src/persistence/Persistence.hx:54: characters 29-37
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:56: characters 2-70
		$mutator = new Mutator($recordType, $strategyMethod, $updateMapper);
		#/src/persistence/Persistence.hx:57: characters 2-59
		$this->mutators->data[($recordType??'null') . "." . ($operationName??'null')] = $mutator;
	}


	/**
	 * @param string $recordType
	 * @param string $operationName
	 * 
	 * @return string
	 */
	public function calcKey ($recordType, $operationName) {
		#/src/persistence/Persistence.hx:156: characters 2-41
		return ($recordType??'null') . "." . ($operationName??'null');
	}


	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $queryValues
	 * 
	 * @return mixed
	 */
	public function get ($recordType, $operationName, $queryValues) {
		#/src/persistence/Persistence.hx:107: characters 6-61
		$this1 = $this->getters;
		#/src/persistence/Persistence.hx:107: lines 107-152
		if (array_key_exists($this->calcKey($recordType, $operationName), $this1->data)) {
			#/src/persistence/Persistence.hx:108: characters 16-64
			$this2 = $this->getters;
			#/src/persistence/Persistence.hx:108: characters 16-64
			$key = $this->calcKey($recordType, $operationName);
			#/src/persistence/Persistence.hx:108: characters 3-65
			$getter = ($this2->data[$key] ?? null);
			#/src/persistence/Persistence.hx:110: characters 3-20
			$query = null;
			#/src/persistence/Persistence.hx:111: characters 7-45
			$f = $getter->queryMapper;
			#/src/persistence/Persistence.hx:111: lines 111-121
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:112: characters 4-52
				$queryMapper = $getter->queryMapper;
				#/src/persistence/Persistence.hx:113: characters 4-36
				$query = $queryMapper($queryValues);
			} else if (Boot::is($getter->queryMapper, Boot::getClass('String'))) {
				#/src/persistence/Persistence.hx:116: characters 4-48
				$queryMapper1 = $getter->queryMapper;
				#/src/persistence/Persistence.hx:117: characters 4-54
				$query = $this->maglev->call($queryMapper1, $queryValues);
			} else {
				#/src/persistence/Persistence.hx:120: characters 4-9
				throw new HxException("queryMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:123: characters 3-25
			$raw_result = null;
			#/src/persistence/Persistence.hx:124: characters 7-48
			$f1 = $getter->strategyMethod;
			#/src/persistence/Persistence.hx:124: lines 124-134
			if (($f1 instanceof \Closure) || ($f1 instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:125: characters 4-58
				$strategyMethod = $getter->strategyMethod;
				#/src/persistence/Persistence.hx:126: characters 4-38
				$raw_result = $strategyMethod($query);
			} else if (Boot::is($getter->strategyMethod, Boot::getClass('String'))) {
				#/src/persistence/Persistence.hx:129: characters 4-54
				$strategyMethod1 = $getter->strategyMethod;
				#/src/persistence/Persistence.hx:130: characters 4-63
				$raw_result = $this->maglev->call($getter->strategyMethod, $query);
			} else {
				#/src/persistence/Persistence.hx:133: characters 4-9
				throw new HxException("strategyMethod must be a string or function");
			}
			#/src/persistence/Persistence.hx:136: characters 3-21
			$result = null;
			#/src/persistence/Persistence.hx:137: characters 7-46
			$f2 = $getter->resultMapper;
			#/src/persistence/Persistence.hx:137: lines 137-147
			if (($f2 instanceof \Closure) || ($f2 instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:138: characters 4-54
				$resultMapper = $getter->resultMapper;
				#/src/persistence/Persistence.hx:139: characters 4-37
				$result = $resultMapper($raw_result);
			} else if (Boot::is($getter->resultMapper, Boot::getClass('String'))) {
				#/src/persistence/Persistence.hx:142: characters 4-50
				$resultMapper1 = $getter->resultMapper;
				#/src/persistence/Persistence.hx:143: characters 4-55
				$result = $this->maglev->call($resultMapper1, $raw_result);
			} else {
				#/src/persistence/Persistence.hx:146: characters 4-9
				throw new HxException("resultMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:148: characters 3-16
			return $result;
		} else {
			#/src/persistence/Persistence.hx:151: characters 3-8
			throw new HxException("the specified getter has not been added");
		}
	}


	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $recordData
	 * 
	 * @return void
	 */
	public function mutate ($recordType, $operationName, $recordData) {
		#/src/persistence/Persistence.hx:72: characters 6-62
		$this1 = $this->mutators;
		#/src/persistence/Persistence.hx:72: lines 72-103
		if (array_key_exists($this->calcKey($recordType, $operationName), $this1->data)) {
			#/src/persistence/Persistence.hx:73: characters 17-71
			$this2 = $this->mutators;
			#/src/persistence/Persistence.hx:73: characters 17-71
			$key = $this->calcKey($recordType, $operationName);
			#/src/persistence/Persistence.hx:73: characters 3-72
			$mutator = ($this2->data[$key] ?? null);
			#/src/persistence/Persistence.hx:75: characters 3-21
			$params = null;
			#/src/persistence/Persistence.hx:76: characters 7-47
			$f = $mutator->updateMapper;
			#/src/persistence/Persistence.hx:76: lines 76-86
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:77: characters 4-55
				$updateMapper = $mutator->updateMapper;
				#/src/persistence/Persistence.hx:78: characters 4-37
				$params = $updateMapper($recordData);
			} else if (Boot::is($mutator->updateMapper, Boot::getClass('String'))) {
				#/src/persistence/Persistence.hx:81: characters 4-51
				$updateMapper1 = $mutator->updateMapper;
				#/src/persistence/Persistence.hx:82: characters 4-55
				$params = $this->maglev->call($updateMapper1, $recordData);
			} else {
				#/src/persistence/Persistence.hx:85: characters 4-9
				throw new HxException("updateMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:88: characters 3-25
			$raw_result = null;
			#/src/persistence/Persistence.hx:89: characters 7-49
			$f1 = $mutator->strategyMethod;
			#/src/persistence/Persistence.hx:89: lines 89-99
			if (($f1 instanceof \Closure) || ($f1 instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:90: characters 4-59
				$strategyMethod = $mutator->strategyMethod;
				#/src/persistence/Persistence.hx:91: characters 4-39
				$raw_result = $strategyMethod($params);
			} else if (Boot::is($mutator->strategyMethod, Boot::getClass('String'))) {
				#/src/persistence/Persistence.hx:94: characters 4-55
				$strategyMethod1 = $mutator->strategyMethod;
				#/src/persistence/Persistence.hx:95: characters 4-57
				$raw_result = $this->maglev->call($strategyMethod1, $params);
			} else {
				#/src/persistence/Persistence.hx:98: characters 4-9
				throw new HxException("strategyMethod must be a string or function");
			}
		} else {
			#/src/persistence/Persistence.hx:102: characters 3-8
			throw new HxException("the specified mutator has not been added");
		}
	}


	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}


Boot::registerClass(Persistence::class, 'persistence.Persistence');
Boot::registerMeta(Persistence::class, new HxAnon([
	"obj" => new HxAnon([
		"SuppressWarnings" => \Array_hx::wrap([\Array_hx::wrap([
			"checkstyle:FieldDocComment",
			"checkstyle:LocalVariableName",
			"checkstyle:MultipleStringLiterals",
			"checkstyle:MagicNumber",
		])]),
	]),
]));
Persistence::__hx__init();
