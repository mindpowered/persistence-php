<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace persistence;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\Exception;
use \persistence\_Persistence\Mutator;
use \persistence\_Persistence\Getter;
use \maglev\MagLev;
use \php\_Boot\HxClosure;
use \haxe\ds\StringMap;

/**
 * Persistence
 */
class Persistence {

	/**
	 * @var StringMap
	 */
	public $getters;
	/**
	 * @var MagLev
	 */
	public $maglev;
	/**
	 * @var StringMap
	 */
	public $mutators;

	/**
	 * @param MagLev $bus
	 * 
	 * @return void
	 */
	public function __construct ($bus) {
		#/src/persistence/Persistence.hx:16: lines 16-59
		$_gthis = $this;
		#/src/persistence/Persistence.hx:17: characters 3-40
		$this->mutators = new StringMap();
		#/src/persistence/Persistence.hx:18: characters 3-38
		$this->getters = new StringMap();
		#/src/persistence/Persistence.hx:19: characters 3-20
		$this->maglev = $bus;
		#/src/persistence/Persistence.hx:20: lines 20-30
		$this->maglev->register("Persistence.AddMutator", function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:21: characters 4-36
			$recordType = ($args->arr[0] ?? null);
			#/src/persistence/Persistence.hx:22: characters 4-39
			$operationName = ($args->arr[1] ?? null);
			#/src/persistence/Persistence.hx:23: characters 4-37
			$strategyMethod = ($args->arr[2] ?? null);
			#/src/persistence/Persistence.hx:24: characters 4-32
			$updateMapper = null;
			#/src/persistence/Persistence.hx:25: lines 25-27
			if ($args->length > 3) {
				#/src/persistence/Persistence.hx:26: characters 5-27
				$updateMapper = ($args->arr[3] ?? null);
			}
			#/src/persistence/Persistence.hx:28: characters 4-76
			$_gthis->addMutator($recordType, $operationName, $strategyMethod, $updateMapper);
			#/src/persistence/Persistence.hx:29: characters 4-15
			return true;
		});
		#/src/persistence/Persistence.hx:31: lines 31-45
		$this->maglev->register("Persistence.AddGetter", function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:32: characters 4-36
			$recordType = ($args->arr[0] ?? null);
			#/src/persistence/Persistence.hx:33: characters 4-39
			$operationName = ($args->arr[1] ?? null);
			#/src/persistence/Persistence.hx:34: characters 4-37
			$strategyMethod = ($args->arr[2] ?? null);
			#/src/persistence/Persistence.hx:35: characters 4-31
			$queryMapper = null;
			#/src/persistence/Persistence.hx:36: lines 36-38
			if ($args->length > 4) {
				#/src/persistence/Persistence.hx:37: characters 5-26
				$queryMapper = ($args->arr[3] ?? null);
			}
			#/src/persistence/Persistence.hx:39: characters 4-32
			$resultMapper = null;
			#/src/persistence/Persistence.hx:40: lines 40-42
			if ($args->length > 5) {
				#/src/persistence/Persistence.hx:41: characters 5-27
				$resultMapper = ($args->arr[4] ?? null);
			}
			#/src/persistence/Persistence.hx:43: characters 4-88
			$_gthis->addGetter($recordType, $operationName, $strategyMethod, $queryMapper, $resultMapper);
			#/src/persistence/Persistence.hx:44: characters 4-15
			return true;
		});
		#/src/persistence/Persistence.hx:46: lines 46-52
		$this->maglev->register("Persistence.Mutate", function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:47: characters 4-36
			$recordType = ($args->arr[0] ?? null);
			#/src/persistence/Persistence.hx:48: characters 4-39
			$operationName = ($args->arr[1] ?? null);
			#/src/persistence/Persistence.hx:49: characters 4-33
			$recordData = ($args->arr[2] ?? null);
			#/src/persistence/Persistence.hx:50: characters 4-49
			$_gthis->mutate($recordType, $operationName, $recordData);
			#/src/persistence/Persistence.hx:51: characters 4-15
			return true;
		});
		#/src/persistence/Persistence.hx:53: lines 53-58
		$this->maglev->register("Persistence.Get", function ($args) use (&$_gthis) {
			#/src/persistence/Persistence.hx:54: characters 4-36
			$recordType = ($args->arr[0] ?? null);
			#/src/persistence/Persistence.hx:55: characters 4-39
			$operationName = ($args->arr[1] ?? null);
			#/src/persistence/Persistence.hx:56: characters 4-34
			$queryValues = ($args->arr[2] ?? null);
			#/src/persistence/Persistence.hx:57: characters 4-54
			return $_gthis->get($recordType, $operationName, $queryValues);
		});
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $strategyMethod
	 * @param mixed $queryMapper
	 * @param mixed $resultMapper
	 * 
	 * @return void
	 */
	public function addGetter ($recordType, $operationName, $strategyMethod, $queryMapper = null, $resultMapper = null) {
		#/src/persistence/Persistence.hx:70: lines 70-72
		if ($queryMapper === null) {
			#/src/persistence/Persistence.hx:71: characters 4-37
			$queryMapper = function ($v) {
				#/src/persistence/Persistence.hx:71: characters 29-37
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:73: lines 73-75
		if ($resultMapper === null) {
			#/src/persistence/Persistence.hx:74: characters 4-38
			$resultMapper = function ($v) {
				#/src/persistence/Persistence.hx:74: characters 30-38
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:76: characters 3-82
		$getter = new Getter($recordType, $strategyMethod, $queryMapper, $resultMapper);
		#/src/persistence/Persistence.hx:77: characters 3-65
		$this1 = $this->getters;
		$k = $this->calcKey($recordType, $operationName);
		$this1->data[$k] = $getter;
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $strategyMethod
	 * @param mixed $updateMapper
	 * 
	 * @return void
	 */
	public function addMutator ($recordType, $operationName, $strategyMethod, $updateMapper = null) {
		#/src/persistence/Persistence.hx:62: lines 62-64
		if ($updateMapper === null) {
			#/src/persistence/Persistence.hx:63: characters 4-38
			$updateMapper = function ($v) {
				#/src/persistence/Persistence.hx:63: characters 30-38
				return $v;
			};
		}
		#/src/persistence/Persistence.hx:65: characters 3-71
		$mutator = new Mutator($recordType, $strategyMethod, $updateMapper);
		#/src/persistence/Persistence.hx:66: characters 3-60
		$this->mutators->data[($recordType??'null') . "." . ($operationName??'null')] = $mutator;
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * 
	 * @return string
	 */
	public function calcKey ($recordType, $operationName) {
		#/src/persistence/Persistence.hx:165: characters 3-42
		return ($recordType??'null') . "." . ($operationName??'null');
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $queryValues
	 * 
	 * @return mixed
	 */
	public function get ($recordType, $operationName, $queryValues) {
		#/src/persistence/Persistence.hx:116: characters 7-62
		$this1 = $this->getters;
		#/src/persistence/Persistence.hx:116: lines 116-161
		if (array_key_exists($this->calcKey($recordType, $operationName), $this1->data)) {
			#/src/persistence/Persistence.hx:117: characters 17-65
			$this1 = $this->getters;
			$key = $this->calcKey($recordType, $operationName);
			#/src/persistence/Persistence.hx:117: characters 4-66
			$getter = ($this1->data[$key] ?? null);
			#/src/persistence/Persistence.hx:119: characters 4-21
			$query = null;
			#/src/persistence/Persistence.hx:120: characters 8-46
			$f = $getter->queryMapper;
			#/src/persistence/Persistence.hx:120: lines 120-130
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:121: characters 5-53
				$queryMapper = $getter->queryMapper;
				#/src/persistence/Persistence.hx:122: characters 5-37
				$query = $queryMapper($queryValues);
			} else if (is_string($getter->queryMapper)) {
				#/src/persistence/Persistence.hx:125: characters 5-49
				$queryMapper = $getter->queryMapper;
				#/src/persistence/Persistence.hx:126: characters 5-55
				$query = $this->maglev->call($queryMapper, $queryValues);
			} else {
				#/src/persistence/Persistence.hx:129: characters 5-10
				throw Exception::thrown("queryMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:132: characters 4-26
			$raw_result = null;
			#/src/persistence/Persistence.hx:133: characters 8-49
			$f = $getter->strategyMethod;
			#/src/persistence/Persistence.hx:133: lines 133-143
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:134: characters 5-59
				$strategyMethod = $getter->strategyMethod;
				#/src/persistence/Persistence.hx:135: characters 5-39
				$raw_result = $strategyMethod($query);
			} else if (is_string($getter->strategyMethod)) {
				#/src/persistence/Persistence.hx:138: characters 5-55
				$strategyMethod = $getter->strategyMethod;
				#/src/persistence/Persistence.hx:139: characters 5-64
				$raw_result = $this->maglev->call($getter->strategyMethod, $query);
			} else {
				#/src/persistence/Persistence.hx:142: characters 5-10
				throw Exception::thrown("strategyMethod must be a string or function");
			}
			#/src/persistence/Persistence.hx:145: characters 4-22
			$result = null;
			#/src/persistence/Persistence.hx:146: characters 8-47
			$f = $getter->resultMapper;
			#/src/persistence/Persistence.hx:146: lines 146-156
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:147: characters 5-55
				$resultMapper = $getter->resultMapper;
				#/src/persistence/Persistence.hx:148: characters 5-38
				$result = $resultMapper($raw_result);
			} else if (is_string($getter->resultMapper)) {
				#/src/persistence/Persistence.hx:151: characters 5-51
				$resultMapper = $getter->resultMapper;
				#/src/persistence/Persistence.hx:152: characters 5-56
				$result = $this->maglev->call($resultMapper, $raw_result);
			} else {
				#/src/persistence/Persistence.hx:155: characters 5-10
				throw Exception::thrown("resultMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:157: characters 4-17
			return $result;
		} else {
			#/src/persistence/Persistence.hx:160: characters 4-9
			throw Exception::thrown("the specified getter has not been added");
		}
	}

	/**
	 * @param string $recordType
	 * @param string $operationName
	 * @param mixed $recordData
	 * 
	 * @return void
	 */
	public function mutate ($recordType, $operationName, $recordData) {
		#/src/persistence/Persistence.hx:81: characters 7-63
		$this1 = $this->mutators;
		#/src/persistence/Persistence.hx:81: lines 81-112
		if (array_key_exists($this->calcKey($recordType, $operationName), $this1->data)) {
			#/src/persistence/Persistence.hx:82: characters 18-72
			$this1 = $this->mutators;
			$key = $this->calcKey($recordType, $operationName);
			#/src/persistence/Persistence.hx:82: characters 4-73
			$mutator = ($this1->data[$key] ?? null);
			#/src/persistence/Persistence.hx:84: characters 4-22
			$params = null;
			#/src/persistence/Persistence.hx:85: characters 8-48
			$f = $mutator->updateMapper;
			#/src/persistence/Persistence.hx:85: lines 85-95
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:86: characters 5-56
				$updateMapper = $mutator->updateMapper;
				#/src/persistence/Persistence.hx:87: characters 5-38
				$params = $updateMapper($recordData);
			} else if (is_string($mutator->updateMapper)) {
				#/src/persistence/Persistence.hx:90: characters 5-52
				$updateMapper = $mutator->updateMapper;
				#/src/persistence/Persistence.hx:91: characters 5-56
				$params = $this->maglev->call($updateMapper, $recordData);
			} else {
				#/src/persistence/Persistence.hx:94: characters 5-10
				throw Exception::thrown("updateMapper must be a string or function");
			}
			#/src/persistence/Persistence.hx:97: characters 4-26
			$raw_result = null;
			#/src/persistence/Persistence.hx:98: characters 8-50
			$f = $mutator->strategyMethod;
			#/src/persistence/Persistence.hx:98: lines 98-108
			if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
				#/src/persistence/Persistence.hx:99: characters 5-60
				$strategyMethod = $mutator->strategyMethod;
				#/src/persistence/Persistence.hx:100: characters 5-40
				$raw_result = $strategyMethod($params);
			} else if (is_string($mutator->strategyMethod)) {
				#/src/persistence/Persistence.hx:103: characters 5-56
				$strategyMethod = $mutator->strategyMethod;
				#/src/persistence/Persistence.hx:104: characters 5-58
				$raw_result = $this->maglev->call($strategyMethod, $params);
			} else {
				#/src/persistence/Persistence.hx:107: characters 5-10
				throw Exception::thrown("strategyMethod must be a string or function");
			}
		} else {
			#/src/persistence/Persistence.hx:111: characters 4-9
			throw Exception::thrown("the specified mutator has not been added");
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


	}
}

Boot::registerClass(Persistence::class, 'persistence.Persistence');
Boot::registerMeta(Persistence::class, new HxAnon(["obj" => new HxAnon(["SuppressWarnings" => \Array_hx::wrap([\Array_hx::wrap([
	"checkstyle:FieldDocComment",
	"checkstyle:LocalVariableName",
	"checkstyle:MultipleStringLiterals",
	"checkstyle:MagicNumber",
])])])]));
Persistence::__hx__init();
