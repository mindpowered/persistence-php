<?php
/**
 * Generated by Haxe 4.0.0
 */

use \php\_Boot\HxClosure;
use \php\_Boot\HxException;
use \php\Boot;
use \php\_Boot\HxString;
use \php\_Boot\HxClass;
use \php\_Boot\HxEnum;
use \haxe\CallStack;
use \php\_Boot\HxAnon;

class Type {
	/**
	 * @param Enum $e
	 * 
	 * @return \Array_hx
	 */
	static public function allEnums ($e) {
		#/usr/share/haxe/std/php7/_std/Type.hx:327: characters 2-28
		if ($e === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:327: characters 17-28
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:329: characters 2-30
		$phpName = Type::getPhpName($e);
		#/usr/share/haxe/std/php7/_std/Type.hx:330: characters 2-34
		if ($phpName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:330: characters 23-34
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:332: characters 2-18
		$result = new \Array_hx();
		#/usr/share/haxe/std/php7/_std/Type.hx:334: lines 334-339
		$_g = 0;
		#/usr/share/haxe/std/php7/_std/Type.hx:334: lines 334-339
		$_g1 = Type::getEnumConstructs($e);
		#/usr/share/haxe/std/php7/_std/Type.hx:334: lines 334-339
		while ($_g < $_g1->length) {
			#/usr/share/haxe/std/php7/_std/Type.hx:334: characters 7-11
			$name = ($_g1->arr[$_g] ?? null);
			#/usr/share/haxe/std/php7/_std/Type.hx:334: lines 334-339
			$_g = $_g + 1;
			#/usr/share/haxe/std/php7/_std/Type.hx:335: characters 3-56
			$reflection = new \ReflectionMethod($phpName, $name);
			#/usr/share/haxe/std/php7/_std/Type.hx:336: lines 336-338
			if ($reflection->getNumberOfParameters() === 0) {
				#/usr/share/haxe/std/php7/_std/Type.hx:337: characters 4-40
				$x = $reflection->invoke(null);
				#/usr/share/haxe/std/php7/_std/Type.hx:337: characters 4-40
				$result->arr[$result->length] = $x;
				#/usr/share/haxe/std/php7/_std/Type.hx:337: characters 4-40
				++$result->length;
			}
		}

		#/usr/share/haxe/std/php7/_std/Type.hx:341: characters 2-15
		return $result;
	}


	/**
	 * @param Class $cl
	 * 
	 * @return mixed
	 */
	static public function createEmptyInstance ($cl) {
		#/usr/share/haxe/std/php7/_std/Type.hx:117: characters 2-39
		if (Boot::getClass('String') === $cl) {
			#/usr/share/haxe/std/php7/_std/Type.hx:117: characters 25-39
			return "";
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:118: characters 2-38
		if (Boot::getClass(\Array_hx::class) === $cl) {
			#/usr/share/haxe/std/php7/_std/Type.hx:118: characters 24-38
			return new \Array_hx();
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:120: characters 2-31
		$phpName = Type::getPhpName($cl);
		#/usr/share/haxe/std/php7/_std/Type.hx:121: characters 2-34
		if ($phpName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:121: characters 23-34
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:123: characters 2-48
		$reflection = new \ReflectionClass($phpName);
		#/usr/share/haxe/std/php7/_std/Type.hx:124: characters 2-51
		return $reflection->newInstanceWithoutConstructor();
	}


	/**
	 * @param Enum $e
	 * @param string $constr
	 * @param \Array_hx $params
	 * 
	 * @return mixed
	 */
	static public function createEnum ($e, $constr, $params = null) {
		#/usr/share/haxe/std/php7/_std/Type.hx:128: characters 2-46
		if (($e === null) || ($constr === null)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:128: characters 35-46
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:130: characters 2-30
		$phpName = Type::getPhpName($e);
		#/usr/share/haxe/std/php7/_std/Type.hx:131: characters 2-34
		if ($phpName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:131: characters 23-34
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:133: characters 49-56
		$tmp = $phpName;
		#/usr/share/haxe/std/php7/_std/Type.hx:133: characters 58-70
		$tmp1 = "__hx__list";
		#/usr/share/haxe/std/php7/_std/Type.hx:133: lines 133-135
		if (!in_array($constr, $tmp::{$tmp1}())) {
			#/usr/share/haxe/std/php7/_std/Type.hx:134: characters 3-8
			throw new HxException("No such constructor " . ($constr??'null'));
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:137: characters 61-68
		$tmp2 = $phpName;
		#/usr/share/haxe/std/php7/_std/Type.hx:137: characters 70-89
		$tmp3 = "__hx__paramsCount";
		#/usr/share/haxe/std/php7/_std/Type.hx:137: characters 2-91
		$paramsCounts = $tmp2::{$tmp3}();
		#/usr/share/haxe/std/php7/_std/Type.hx:138: lines 138-140
		if ((($params === null) && ($paramsCounts[$constr] !== 0)) || (($params !== null) && ($params->length !== $paramsCounts[$constr]))) {
			#/usr/share/haxe/std/php7/_std/Type.hx:139: characters 3-8
			throw new HxException("Provided parameters count does not match expected parameters count");
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:142: lines 142-147
		if ($params === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:143: characters 28-35
			$tmp4 = $phpName;
			#/usr/share/haxe/std/php7/_std/Type.hx:143: characters 37-43
			$tmp5 = $constr;
			#/usr/share/haxe/std/php7/_std/Type.hx:143: characters 3-44
			return $tmp4::{$tmp5}();
		} else {
			#/usr/share/haxe/std/php7/_std/Type.hx:145: characters 3-59
			$nativeArgs = $params->arr;
			#/usr/share/haxe/std/php7/_std/Type.hx:146: characters 28-35
			$tmp6 = $phpName;
			#/usr/share/haxe/std/php7/_std/Type.hx:146: characters 37-43
			$tmp7 = $constr;
			#/usr/share/haxe/std/php7/_std/Type.hx:146: characters 3-70
			return $tmp6::{$tmp7}(...$nativeArgs);
		}
	}


	/**
	 * @param Enum $e
	 * @param int $index
	 * @param \Array_hx $params
	 * 
	 * @return mixed
	 */
	static public function createEnumIndex ($e, $index, $params = null) {
		#/usr/share/haxe/std/php7/_std/Type.hx:151: characters 2-45
		if (($e === null) || ($index === null)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:151: characters 34-45
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:153: characters 2-30
		$phpName = Type::getPhpName($e);
		#/usr/share/haxe/std/php7/_std/Type.hx:154: characters 2-34
		if ($phpName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:154: characters 23-34
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:156: characters 66-73
		$tmp = $phpName;
		#/usr/share/haxe/std/php7/_std/Type.hx:156: characters 75-87
		$tmp1 = "__hx__list";
		#/usr/share/haxe/std/php7/_std/Type.hx:156: characters 2-89
		$constructors = $tmp::{$tmp1}();
		#/usr/share/haxe/std/php7/_std/Type.hx:157: lines 157-159
		if (($index < 0) || ($index >= count($constructors))) {
			#/usr/share/haxe/std/php7/_std/Type.hx:158: characters 3-8
			throw new HxException("" . ($index??'null') . " is not a valid enum constructor index");
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:161: characters 2-35
		$constr = $constructors[$index];
		#/usr/share/haxe/std/php7/_std/Type.hx:162: characters 61-68
		$tmp2 = $phpName;
		#/usr/share/haxe/std/php7/_std/Type.hx:162: characters 70-89
		$tmp3 = "__hx__paramsCount";
		#/usr/share/haxe/std/php7/_std/Type.hx:162: characters 2-91
		$paramsCounts = $tmp2::{$tmp3}();
		#/usr/share/haxe/std/php7/_std/Type.hx:163: lines 163-165
		if ((($params === null) && ($paramsCounts[$constr] !== 0)) || (($params !== null) && ($params->length !== $paramsCounts[$constr]))) {
			#/usr/share/haxe/std/php7/_std/Type.hx:164: characters 3-8
			throw new HxException("Provided parameters count does not match expected parameters count");
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:167: lines 167-172
		if ($params === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:168: characters 28-35
			$tmp4 = $phpName;
			#/usr/share/haxe/std/php7/_std/Type.hx:168: characters 37-43
			$tmp5 = $constr;
			#/usr/share/haxe/std/php7/_std/Type.hx:168: characters 3-44
			return $tmp4::{$tmp5}();
		} else {
			#/usr/share/haxe/std/php7/_std/Type.hx:170: characters 3-59
			$nativeArgs = $params->arr;
			#/usr/share/haxe/std/php7/_std/Type.hx:171: characters 28-35
			$tmp6 = $phpName;
			#/usr/share/haxe/std/php7/_std/Type.hx:171: characters 37-43
			$tmp7 = $constr;
			#/usr/share/haxe/std/php7/_std/Type.hx:171: characters 3-70
			return $tmp6::{$tmp7}(...$nativeArgs);
		}
	}


	/**
	 * @param Class $cl
	 * @param \Array_hx $args
	 * 
	 * @return mixed
	 */
	static public function createInstance ($cl, $args) {
		#/usr/share/haxe/std/php7/_std/Type.hx:108: characters 2-39
		if (Boot::getClass('String') === $cl) {
			#/usr/share/haxe/std/php7/_std/Type.hx:108: characters 25-39
			return ($args->arr[0] ?? null);
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:110: characters 2-31
		$phpName = Type::getPhpName($cl);
		#/usr/share/haxe/std/php7/_std/Type.hx:111: characters 2-34
		if ($phpName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:111: characters 23-34
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:112: characters 2-56
		$nativeArgs = $args->arr;
		#/usr/share/haxe/std/php7/_std/Type.hx:113: characters 26-33
		$tmp = $phpName;
		#/usr/share/haxe/std/php7/_std/Type.hx:113: characters 2-60
		return new $tmp(...$nativeArgs);
	}


	/**
	 * @param mixed $e
	 * 
	 * @return string
	 */
	static public function enumConstructor ($e) {
		#/usr/share/haxe/std/php7/_std/Type.hx:315: characters 2-22
		return Boot::dynamicField($e, 'tag');
	}


	/**
	 * @param mixed $a
	 * @param mixed $b
	 * 
	 * @return bool
	 */
	static public function enumEq ($a, $b) {
		#/usr/share/haxe/std/php7/_std/Type.hx:278: characters 2-25
		if (Boot::equal($a, $b)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:278: characters 14-25
			return true;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:279: characters 2-42
		if (($a === null) || ($b === null)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:279: characters 30-42
			return false;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:281: lines 281-311
		try {
			#/usr/share/haxe/std/php7/_std/Type.hx:282: characters 3-73
			if (!Boot::equal(get_class($a), get_class($b))) {
				#/usr/share/haxe/std/php7/_std/Type.hx:282: characters 61-73
				return false;
			}
			#/usr/share/haxe/std/php7/_std/Type.hx:283: characters 3-49
			if (Boot::dynamicField($a, 'index') !== Boot::dynamicField($b, 'index')) {
				#/usr/share/haxe/std/php7/_std/Type.hx:283: characters 37-49
				return false;
			}
			#/usr/share/haxe/std/php7/_std/Type.hx:285: characters 3-62
			$aParams = Boot::dynamicField($a, 'params');
			#/usr/share/haxe/std/php7/_std/Type.hx:286: characters 3-62
			$bParams = Boot::dynamicField($b, 'params');
			#/usr/share/haxe/std/php7/_std/Type.hx:287: lines 287-306
			$_g1 = 0;
			#/usr/share/haxe/std/php7/_std/Type.hx:287: lines 287-306
			$_g = count($aParams);
			#/usr/share/haxe/std/php7/_std/Type.hx:287: lines 287-306
			while ($_g1 < $_g) {
				#/usr/share/haxe/std/php7/_std/Type.hx:287: lines 287-306
				$_g1 = $_g1 + 1;
				#/usr/share/haxe/std/php7/_std/Type.hx:287: characters 8-9
				$i = $_g1 - 1;
				#/usr/share/haxe/std/php7/_std/Type.hx:289: lines 289-294
				if (($aParams[$i] instanceof HxEnum)) {
					#/usr/share/haxe/std/php7/_std/Type.hx:290: lines 290-292
					if (!Type::enumEq($aParams[$i], $bParams[$i])) {
						#/usr/share/haxe/std/php7/_std/Type.hx:291: characters 6-18
						return false;
					}
					#/usr/share/haxe/std/php7/_std/Type.hx:293: characters 5-13
					continue;
				}
				#/usr/share/haxe/std/php7/_std/Type.hx:296: characters 8-38
				$f = $aParams[$i];
				#/usr/share/haxe/std/php7/_std/Type.hx:296: lines 296-301
				if (($f instanceof \Closure) || ($f instanceof HxClosure)) {
					#/usr/share/haxe/std/php7/_std/Type.hx:297: lines 297-299
					if (!\Reflect::compareMethods($aParams[$i], $bParams[$i])) {
						#/usr/share/haxe/std/php7/_std/Type.hx:298: characters 6-18
						return false;
					}
					#/usr/share/haxe/std/php7/_std/Type.hx:300: characters 5-13
					continue;
				}
				#/usr/share/haxe/std/php7/_std/Type.hx:303: lines 303-305
				if (!Boot::equal($aParams[$i], $bParams[$i])) {
					#/usr/share/haxe/std/php7/_std/Type.hx:304: characters 5-17
					return false;
				}
			}

			#/usr/share/haxe/std/php7/_std/Type.hx:308: characters 3-14
			return true;
		} catch (\Throwable $__hx__caught_e) {
			CallStack::saveExceptionTrace($__hx__caught_e);
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/usr/share/haxe/std/php7/_std/Type.hx:310: characters 3-15
			return false;
		}
	}


	/**
	 * @param mixed $e
	 * 
	 * @return int
	 */
	static public function enumIndex ($e) {
		#/usr/share/haxe/std/php7/_std/Type.hx:323: characters 2-24
		return Boot::dynamicField($e, 'index');
	}


	/**
	 * @param mixed $e
	 * 
	 * @return \Array_hx
	 */
	static public function enumParameters ($e) {
		#/usr/share/haxe/std/php7/_std/Type.hx:319: characters 2-53
		return \Array_hx::wrap(Boot::dynamicField($e, 'params'));
	}


	/**
	 * @param mixed $o
	 * 
	 * @return Class
	 */
	static public function getClass ($o) {
		#/usr/share/haxe/std/php7/_std/Type.hx:44: lines 44-51
		if (is_object($o) && !($o instanceof HxClass) && !($o instanceof HxEnum)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:45: characters 3-53
			$cls = Boot::getClass(get_class($o));
			#/usr/share/haxe/std/php7/_std/Type.hx:46: characters 10-53
			if ($cls === Boot::getClass(HxAnon::class)) {
				#/usr/share/haxe/std/php7/_std/Type.hx:46: characters 37-41
				return null;
			} else {
				#/usr/share/haxe/std/php7/_std/Type.hx:46: characters 44-52
				return $cls;
			}
		} else if (is_string($o)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:48: characters 3-21
			return Boot::getClass('String');
		} else {
			#/usr/share/haxe/std/php7/_std/Type.hx:50: characters 3-14
			return null;
		}
	}


	/**
	 * @param Class $c
	 * 
	 * @return \Array_hx
	 */
	static public function getClassFields ($c) {
		#/usr/share/haxe/std/php7/_std/Type.hx:219: characters 2-28
		if ($c === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:219: characters 17-28
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:220: characters 2-42
		if ($c === Boot::getClass('String')) {
			#/usr/share/haxe/std/php7/_std/Type.hx:220: characters 19-42
			return \Array_hx::wrap(["fromCharCode"]);
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:222: characters 2-30
		$phpName = Type::getPhpName($c);
		#/usr/share/haxe/std/php7/_std/Type.hx:223: characters 2-34
		if ($phpName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:223: characters 23-34
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:225: characters 2-48
		$reflection = new \ReflectionClass($phpName);
		#/usr/share/haxe/std/php7/_std/Type.hx:227: characters 16-33
		$this1 = [];
		#/usr/share/haxe/std/php7/_std/Type.hx:227: characters 2-34
		$methods = $this1;
		#/usr/share/haxe/std/php7/_std/Type.hx:228: lines 228-235
		$_g_arr = $reflection->getMethods(\ReflectionMethod::IS_STATIC);
		#/usr/share/haxe/std/php7/_std/Type.hx:228: lines 228-235
		$_g_hasMore = reset($_g_arr) !== false;
		#/usr/share/haxe/std/php7/_std/Type.hx:228: lines 228-235
		while ($_g_hasMore) {
			#/usr/share/haxe/std/php7/_std/Type.hx:228: lines 228-235
			$result = current($_g_arr);
			#/usr/share/haxe/std/php7/_std/Type.hx:228: lines 228-235
			$_g_hasMore = next($_g_arr) !== false;
			#/usr/share/haxe/std/php7/_std/Type.hx:228: lines 228-235
			$m = $result;
			#/usr/share/haxe/std/php7/_std/Type.hx:230: characters 3-30
			$m1 = $m;
			#/usr/share/haxe/std/php7/_std/Type.hx:231: characters 3-26
			$name = $m1->getName();
			#/usr/share/haxe/std/php7/_std/Type.hx:232: lines 232-234
			if (!(($name === "__construct") || (HxString::indexOf($name, "__hx__") === 0)) && ($phpName === $m1->getDeclaringClass()->getName())) {
				#/usr/share/haxe/std/php7/_std/Type.hx:233: characters 4-28
				array_push($methods, $name);
			}
		}

		#/usr/share/haxe/std/php7/_std/Type.hx:237: characters 19-36
		$this2 = [];
		#/usr/share/haxe/std/php7/_std/Type.hx:237: characters 2-37
		$properties = $this2;
		#/usr/share/haxe/std/php7/_std/Type.hx:238: lines 238-244
		$_g_arr1 = $reflection->getProperties(\ReflectionProperty::IS_STATIC);
		#/usr/share/haxe/std/php7/_std/Type.hx:238: lines 238-244
		$_g_hasMore1 = reset($_g_arr1) !== false;
		#/usr/share/haxe/std/php7/_std/Type.hx:238: lines 238-244
		while ($_g_hasMore1) {
			#/usr/share/haxe/std/php7/_std/Type.hx:238: lines 238-244
			$result1 = current($_g_arr1);
			#/usr/share/haxe/std/php7/_std/Type.hx:238: lines 238-244
			$_g_hasMore1 = next($_g_arr1) !== false;
			#/usr/share/haxe/std/php7/_std/Type.hx:238: lines 238-244
			$p = $result1;
			#/usr/share/haxe/std/php7/_std/Type.hx:239: characters 3-30
			$p1 = $p;
			#/usr/share/haxe/std/php7/_std/Type.hx:240: characters 3-26
			$name1 = $p1->getName();
			#/usr/share/haxe/std/php7/_std/Type.hx:241: lines 241-243
			if (!(($name1 === "__construct") || (HxString::indexOf($name1, "__hx__") === 0)) && ($phpName === $p1->getDeclaringClass()->getName())) {
				#/usr/share/haxe/std/php7/_std/Type.hx:242: characters 4-31
				array_push($properties, $name1);
			}
		}

		#/usr/share/haxe/std/php7/_std/Type.hx:245: characters 2-53
		$properties = array_diff($properties, $methods);
		#/usr/share/haxe/std/php7/_std/Type.hx:246: characters 2-55
		$fields = array_merge($properties, $methods);
		#/usr/share/haxe/std/php7/_std/Type.hx:248: characters 2-43
		return \Array_hx::wrap($fields);
	}


	/**
	 * @param Class $c
	 * 
	 * @return string
	 */
	static public function getClassName ($c) {
		#/usr/share/haxe/std/php7/_std/Type.hx:67: characters 2-27
		if ($c === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:67: characters 16-27
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:68: characters 2-33
		return Boot::getHaxeName($c);
	}


	/**
	 * @param mixed $o
	 * 
	 * @return Enum
	 */
	static public function getEnum ($o) {
		#/usr/share/haxe/std/php7/_std/Type.hx:55: characters 2-27
		if ($o === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:55: characters 16-27
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:56: characters 2-53
		return Boot::getClass(get_class($o));
	}


	/**
	 * @param Enum $e
	 * 
	 * @return \Array_hx
	 */
	static public function getEnumConstructs ($e) {
		#/usr/share/haxe/std/php7/_std/Type.hx:252: characters 2-28
		if ($e === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:252: characters 17-28
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:253: characters 2-59
		return \Array_hx::wrap($e->__hx__list());
	}


	/**
	 * @param Enum $e
	 * 
	 * @return string
	 */
	static public function getEnumName ($e) {
		#/usr/share/haxe/std/php7/_std/Type.hx:72: characters 2-29
		return Type::getClassName($e);
	}


	/**
	 * @param Class $c
	 * 
	 * @return \Array_hx
	 */
	static public function getInstanceFields ($c) {
		#/usr/share/haxe/std/php7/_std/Type.hx:176: characters 2-28
		if ($c === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:176: characters 17-28
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:177: lines 177-183
		if ($c === Boot::getClass('String')) {
			#/usr/share/haxe/std/php7/_std/Type.hx:178: lines 178-182
			return \Array_hx::wrap([
				"substr",
				"charAt",
				"charCodeAt",
				"indexOf",
				"lastIndexOf",
				"split",
				"toLowerCase",
				"toUpperCase",
				"toString",
				"length",
			]);
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:185: characters 2-30
		$phpName = Type::getPhpName($c);
		#/usr/share/haxe/std/php7/_std/Type.hx:186: characters 2-34
		if ($phpName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:186: characters 23-34
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:188: characters 2-48
		$reflection = new \ReflectionClass($phpName);
		#/usr/share/haxe/std/php7/_std/Type.hx:190: characters 16-33
		$this1 = [];
		#/usr/share/haxe/std/php7/_std/Type.hx:190: characters 2-34
		$methods = $this1;
		#/usr/share/haxe/std/php7/_std/Type.hx:191: lines 191-199
		$_g_arr = $reflection->getMethods();
		#/usr/share/haxe/std/php7/_std/Type.hx:191: lines 191-199
		$_g_hasMore = reset($_g_arr) !== false;
		#/usr/share/haxe/std/php7/_std/Type.hx:191: lines 191-199
		while ($_g_hasMore) {
			#/usr/share/haxe/std/php7/_std/Type.hx:191: lines 191-199
			$result = current($_g_arr);
			#/usr/share/haxe/std/php7/_std/Type.hx:191: lines 191-199
			$_g_hasMore = next($_g_arr) !== false;
			#/usr/share/haxe/std/php7/_std/Type.hx:191: lines 191-199
			$m = $result;
			#/usr/share/haxe/std/php7/_std/Type.hx:192: characters 3-35
			$method = $m;
			#/usr/share/haxe/std/php7/_std/Type.hx:193: lines 193-198
			if (!$method->isStatic()) {
				#/usr/share/haxe/std/php7/_std/Type.hx:194: characters 4-32
				$name = $method->getName();
				#/usr/share/haxe/std/php7/_std/Type.hx:195: lines 195-197
				if (!(($name === "__construct") || (HxString::indexOf($name, "__hx__") === 0))) {
					#/usr/share/haxe/std/php7/_std/Type.hx:196: characters 5-29
					array_push($methods, $name);
				}
			}
		}

		#/usr/share/haxe/std/php7/_std/Type.hx:201: characters 19-36
		$this2 = [];
		#/usr/share/haxe/std/php7/_std/Type.hx:201: characters 2-37
		$properties = $this2;
		#/usr/share/haxe/std/php7/_std/Type.hx:202: lines 202-210
		$_g_arr1 = $reflection->getProperties();
		#/usr/share/haxe/std/php7/_std/Type.hx:202: lines 202-210
		$_g_hasMore1 = reset($_g_arr1) !== false;
		#/usr/share/haxe/std/php7/_std/Type.hx:202: lines 202-210
		while ($_g_hasMore1) {
			#/usr/share/haxe/std/php7/_std/Type.hx:202: lines 202-210
			$result1 = current($_g_arr1);
			#/usr/share/haxe/std/php7/_std/Type.hx:202: lines 202-210
			$_g_hasMore1 = next($_g_arr1) !== false;
			#/usr/share/haxe/std/php7/_std/Type.hx:202: lines 202-210
			$p = $result1;
			#/usr/share/haxe/std/php7/_std/Type.hx:203: characters 3-39
			$property = $p;
			#/usr/share/haxe/std/php7/_std/Type.hx:204: lines 204-209
			if (!$property->isStatic()) {
				#/usr/share/haxe/std/php7/_std/Type.hx:205: characters 4-34
				$name1 = $property->getName();
				#/usr/share/haxe/std/php7/_std/Type.hx:206: lines 206-208
				if (!(($name1 === "__construct") || (HxString::indexOf($name1, "__hx__") === 0))) {
					#/usr/share/haxe/std/php7/_std/Type.hx:207: characters 5-32
					array_push($properties, $name1);
				}
			}
		}

		#/usr/share/haxe/std/php7/_std/Type.hx:211: characters 2-53
		$properties = array_diff($properties, $methods);
		#/usr/share/haxe/std/php7/_std/Type.hx:213: characters 2-55
		$fields = array_merge($properties, $methods);
		#/usr/share/haxe/std/php7/_std/Type.hx:215: characters 2-43
		return \Array_hx::wrap($fields);
	}


	/**
	 * @param mixed $type
	 * 
	 * @return string
	 */
	static public function getPhpName ($type) {
		#/usr/share/haxe/std/php7/_std/Type.hx:349: characters 2-45
		$haxeName = Boot::getHaxeName($type);
		#/usr/share/haxe/std/php7/_std/Type.hx:351: characters 9-62
		if ($haxeName === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:351: characters 29-33
			return null;
		} else {
			#/usr/share/haxe/std/php7/_std/Type.hx:351: characters 36-61
			return Boot::getPhpName($haxeName);
		}
	}


	/**
	 * @param Class $c
	 * 
	 * @return Class
	 */
	static public function getSuperClass ($c) {
		#/usr/share/haxe/std/php7/_std/Type.hx:60: characters 2-27
		if ($c === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:60: characters 16-27
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:61: characters 2-67
		$parentClass = get_parent_class($c->phpClassName);
		#/usr/share/haxe/std/php7/_std/Type.hx:62: characters 2-30
		if (!$parentClass) {
			#/usr/share/haxe/std/php7/_std/Type.hx:62: characters 19-30
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:63: characters 2-40
		return Boot::getClass($parentClass);
	}


	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	static public function isServiceFieldName ($name) {
		#/usr/share/haxe/std/php7/_std/Type.hx:358: characters 9-63
		if ($name !== "__construct") {
			#/usr/share/haxe/std/php7/_std/Type.hx:358: characters 35-62
			return HxString::indexOf($name, "__hx__") === 0;
		} else {
			#/usr/share/haxe/std/php7/_std/Type.hx:358: characters 9-63
			return true;
		}
	}


	/**
	 * @param string $name
	 * 
	 * @return Class
	 */
	static public function resolveClass ($name) {
		#/usr/share/haxe/std/php7/_std/Type.hx:76: characters 2-31
		if ($name === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:76: characters 20-31
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:77: lines 77-85
		switch ($name) {
			case "Bool":
				#/usr/share/haxe/std/php7/_std/Type.hx:81: characters 17-33
				return Boot::getClass('Bool');
				break;
			case "Class":
				#/usr/share/haxe/std/php7/_std/Type.hx:83: characters 17-34
				return Boot::getClass('Class');
				break;
			case "Dynamic":
				#/usr/share/haxe/std/php7/_std/Type.hx:78: characters 19-38
				return Boot::getClass('Dynamic');
				break;
			case "Enum":
				#/usr/share/haxe/std/php7/_std/Type.hx:84: characters 16-32
				return Boot::getClass('Enum');
				break;
			case "Float":
				#/usr/share/haxe/std/php7/_std/Type.hx:80: characters 17-34
				return Boot::getClass('Float');
				break;
			case "Int":
				#/usr/share/haxe/std/php7/_std/Type.hx:79: characters 15-30
				return Boot::getClass('Int');
				break;
			case "String":
				#/usr/share/haxe/std/php7/_std/Type.hx:82: characters 18-31
				return Boot::getClass('String');
				break;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:87: characters 2-39
		$phpClass = Boot::getPhpName($name);
		#/usr/share/haxe/std/php7/_std/Type.hx:88: characters 2-87
		if (!class_exists($phpClass) && !interface_exists($phpClass)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:88: characters 76-87
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:90: characters 2-40
		$hxClass = Boot::getClass($phpClass);
		#/usr/share/haxe/std/php7/_std/Type.hx:92: characters 2-21
		return $hxClass;
	}


	/**
	 * @param string $name
	 * 
	 * @return Enum
	 */
	static public function resolveEnum ($name) {
		#/usr/share/haxe/std/php7/_std/Type.hx:96: characters 2-31
		if ($name === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:96: characters 20-31
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:97: characters 2-38
		if ($name === "Bool") {
			#/usr/share/haxe/std/php7/_std/Type.hx:97: characters 22-38
			return Boot::getClass('Bool');
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:99: characters 2-39
		$phpClass = Boot::getPhpName($name);
		#/usr/share/haxe/std/php7/_std/Type.hx:100: characters 2-49
		if (!class_exists($phpClass)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:100: characters 38-49
			return null;
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:102: characters 2-40
		$hxClass = Boot::getClass($phpClass);
		#/usr/share/haxe/std/php7/_std/Type.hx:104: characters 2-21
		return $hxClass;
	}


	/**
	 * @param mixed $v
	 * 
	 * @return \ValueType
	 */
	static public function typeof ($v) {
		#/usr/share/haxe/std/php7/_std/Type.hx:257: characters 2-29
		if ($v === null) {
			#/usr/share/haxe/std/php7/_std/Type.hx:257: characters 17-29
			return \ValueType::TNull();
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:259: lines 259-267
		if (is_object($v)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:260: characters 3-46
			if (($v instanceof \Closure) || ($v instanceof HxClosure)) {
				#/usr/share/haxe/std/php7/_std/Type.hx:260: characters 30-46
				return \ValueType::TFunction();
			}
			#/usr/share/haxe/std/php7/_std/Type.hx:261: characters 3-42
			if (($v instanceof \StdClass)) {
				#/usr/share/haxe/std/php7/_std/Type.hx:261: characters 28-42
				return \ValueType::TObject();
			}
			#/usr/share/haxe/std/php7/_std/Type.hx:262: characters 3-38
			if (($v instanceof HxClass)) {
				#/usr/share/haxe/std/php7/_std/Type.hx:262: characters 24-38
				return \ValueType::TObject();
			}
			#/usr/share/haxe/std/php7/_std/Type.hx:264: characters 3-52
			$hxClass = Boot::getClass(get_class($v));
			#/usr/share/haxe/std/php7/_std/Type.hx:265: characters 3-54
			if (($v instanceof HxEnum)) {
				#/usr/share/haxe/std/php7/_std/Type.hx:265: characters 28-54
				return \ValueType::TEnum($hxClass);
			}
			#/usr/share/haxe/std/php7/_std/Type.hx:266: characters 3-30
			return \ValueType::TClass($hxClass);
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:269: characters 2-31
		if (is_bool($v)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:269: characters 19-31
			return \ValueType::TBool();
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:270: characters 2-29
		if (is_int($v)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:270: characters 18-29
			return \ValueType::TInt();
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:271: characters 2-33
		if (is_float($v)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:271: characters 20-33
			return \ValueType::TFloat();
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:272: characters 2-42
		if (is_string($v)) {
			#/usr/share/haxe/std/php7/_std/Type.hx:272: characters 21-42
			return \ValueType::TClass(Boot::getClass('String'));
		}
		#/usr/share/haxe/std/php7/_std/Type.hx:274: characters 2-17
		return \ValueType::TUnknown();
	}
}


Boot::registerClass(Type::class, 'Type');
